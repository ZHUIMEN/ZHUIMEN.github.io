<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.co の博客</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cocoblog.site/"/>
  <updated>2018-06-29T01:31:41.000Z</updated>
  <id>http://cocoblog.site/</id>
  
  <author>
    <name>Mr.co</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git合并分支到master</title>
    <link href="http://cocoblog.site/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E5%88%B0master.html"/>
    <id>http://cocoblog.site/git合并分支到master.html</id>
    <published>2018-06-29T01:26:34.000Z</published>
    <updated>2018-06-29T01:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在dev分支上，刚开发完项目-需要合并到master-需要如下步骤"><a href="#在dev分支上，刚开发完项目-需要合并到master-需要如下步骤" class="headerlink" title="在dev分支上，刚开发完项目,需要合并到master,需要如下步骤:"></a>在dev分支上，刚开发完项目,需要合并到master,需要如下步骤:</h4><ul><li>提交修改到dev</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git  add .</div><div class="line">git  commit -m ‘dev&apos;</div><div class="line">git push -u origin dev</div></pre></td></tr></table></figure><ul><li>合并到master</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git  checkout master #切换到master分支上</div><div class="line">git pull origin master #把远程master上的代码pull下来</div><div class="line">git  merge dev #把dev分支的代码合并到master上</div><div class="line">git status #然后查看状态</div><div class="line">git push origin master #把commit push到远程master上</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在dev分支上，刚开发完项目-需要合并到master-需要如下步骤&quot;&gt;&lt;a href=&quot;#在dev分支上，刚开发完项目-需要合并到master-需要如下步骤&quot; class=&quot;headerlink&quot; title=&quot;在dev分支上，刚开发完项目,需要合并到master
      
    
    </summary>
    
    
      <category term="git" scheme="http://cocoblog.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git 添加tag</title>
    <link href="http://cocoblog.site/git-%E6%B7%BB%E5%8A%A0tag.html"/>
    <id>http://cocoblog.site/git-添加tag.html</id>
    <published>2018-06-27T06:47:00.000Z</published>
    <updated>2018-06-27T09:12:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令"><a href="#标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令" class="headerlink" title="标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令"></a>标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令</h3><ul><li>查看标签</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag # 打印出当前仓库的所有tag</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -l v1.0 # 打印符合检索条件的标签</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show v1.0 # 查看Tag的版本信息</div></pre></td></tr></table></figure><hr><a id="more"></a><ul><li>创建本地标签 (git tag分为两种类型：轻量tag和附注tag。轻量tag是指向提交对象的引用，附注Tag则是仓库中的一个独立对象。建议使用附注Tag)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag v1.0 -light   # 轻量tag</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a v1.0 -m &quot;发布版本&quot;   # 附注tag</div></pre></td></tr></table></figure><ul><li>给commit 加Tag(打Tag不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的SHA（通过git log获取)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a v1.0 0c3b62d -m &quot;补打 v1.0&quot;将本地标签提交到远程仓库</div></pre></td></tr></table></figure><hr><ul><li>将本地标签提交到远程仓库(前面所提到的创建标签，只是将标签添加到了本地的版本管理，我们需要在创建之后将本地标签同步到远程仓库)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --tags  #推送所有标签</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin v1.0  # 将v1.0 Tag提交到git服务器</div></pre></td></tr></table></figure><hr><ul><li>切换到Tag</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout v1.0. #与切换分支命令相同</div></pre></td></tr></table></figure><hr><ul><li><p>删除本地Tag(误打或需要修改Tag时，需要先将Tag删除，再打新Tag)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -d v1.0 # 删除Tag</div></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete v1.0  # 同创建本地标签一样，删除了本地标签之后也要同时删除远程仓库的标签。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令&quot;&gt;&lt;a href=&quot;#标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令&quot; class=&quot;headerlink&quot; title=&quot;标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令&quot;&gt;&lt;/a&gt;标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git tag # 打印出当前仓库的所有tag&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git tag -l v1.0 # 打印符合检索条件的标签&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git show v1.0 # 查看Tag的版本信息&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://cocoblog.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>app上线到App Store之后的链接地址</title>
    <link href="http://cocoblog.site/app%E4%B8%8A%E7%BA%BF%E5%88%B0App-Store%E4%B9%8B%E5%90%8E%E7%9A%84%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80.html"/>
    <id>http://cocoblog.site/app上线到App-Store之后的链接地址.html</id>
    <published>2018-06-26T02:21:25.000Z</published>
    <updated>2018-06-26T02:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://itunes.apple.com/cn/app/id1396313134?mt=8" target="_blank" rel="external">https://itunes.apple.com/cn/app/id1396313134?mt=8</a></p><p>把id改成自己app的id就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/id1396313134?mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itunes.apple.com/cn/app/id1396313134?m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS开发上传App Store时候一直卡在 Authenticating with the iTunes Store 的解决办法</title>
    <link href="http://cocoblog.site/iOS%E5%BC%80%E5%8F%91%E4%B8%8A%E4%BC%A0App-Store%E6%97%B6%E5%80%99%E4%B8%80%E7%9B%B4%E5%8D%A1%E5%9C%A8-Authenticating-with-the-iTunes-Store-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
    <id>http://cocoblog.site/iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法.html</id>
    <published>2018-06-25T01:46:16.000Z</published>
    <updated>2018-06-25T01:59:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法"><a href="#iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法" class="headerlink" title="iOS开发上传App Store时候一直卡在 Authenticating with the iTunes Store 的解决办法"></a>iOS开发上传App Store时候一直卡在 Authenticating with the iTunes Store 的解决办法</h3><p>####今天上传项目的时候出现一直卡死在 Authenticating with the iTunes Store 这个步骤 与网络无关, 搜索了下<a href="https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin" target="_blank" rel="external">stack</a></p><h4 id="需要执行下面三个步骤"><a href="#需要执行下面三个步骤" class="headerlink" title="需要执行下面三个步骤"></a>需要执行下面三个步骤</h4><ol><li><p>cd ~  </p></li><li><p>mv .itmstransporter/ .old_itmstransporter/  </p></li><li><p>“/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter” </p></li></ol><h4 id="当终端命令全部执行完毕-在上传就可以了"><a href="#当终端命令全部执行完毕-在上传就可以了" class="headerlink" title="当终端命令全部执行完毕,在上传就可以了"></a>当终端命令全部执行完毕,在上传就可以了</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法&quot;&gt;&lt;a href=&quot;#iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-S
      
    
    </summary>
    
    
      <category term="打包" scheme="http://cocoblog.site/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>git拉取远程分支并创建本地分支</title>
    <link href="http://cocoblog.site/git%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.html"/>
    <id>http://cocoblog.site/git拉取远程分支并创建本地分支.html</id>
    <published>2018-05-29T01:39:09.000Z</published>
    <updated>2018-05-29T01:55:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git拉取远程分支并创建本地分支"><a href="#git拉取远程分支并创建本地分支" class="headerlink" title="git拉取远程分支并创建本地分支"></a>git拉取远程分支并创建本地分支</h3><ul><li>使用如下git命令查看所有远程分支：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r ///</div></pre></td></tr></table></figure><ul><li>拉取远程分支并创建本地分支使用如下命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b 本地分支名x origin/远程分支名x</div></pre></td></tr></table></figure><p>使用该方式会在本地新建分支x，并自动切换到该本地分支x</p><a id="more"></a><p><strong>采用此种方法建立的本地分支会和远程分支建立映射关系</strong>。</p><ul><li>或者使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin 远程分支名x:本地分支名x</div></pre></td></tr></table></figure><p>使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout.</p><p><strong>采用此种方法建立的本地分支不会和远程分支建立映射关系。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git拉取远程分支并创建本地分支&quot;&gt;&lt;a href=&quot;#git拉取远程分支并创建本地分支&quot; class=&quot;headerlink&quot; title=&quot;git拉取远程分支并创建本地分支&quot;&gt;&lt;/a&gt;git拉取远程分支并创建本地分支&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用如下git命令查看所有远程分支：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git branch -r ///&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;拉取远程分支并创建本地分支使用如下命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b 本地分支名x origin/远程分支名x&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用该方式会在本地新建分支x，并自动切换到该本地分支x&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://cocoblog.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>iOS静态库打包</title>
    <link href="http://cocoblog.site/iOS%E9%9D%99%E6%80%81%E5%BA%93%E6%89%93%E5%8C%85.html"/>
    <id>http://cocoblog.site/iOS静态库打包.html</id>
    <published>2018-05-28T09:08:57.000Z</published>
    <updated>2018-05-29T01:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS-开发打包静态库-a文件，本人一步步教你用脚本打包"><a href="#iOS-开发打包静态库-a文件，本人一步步教你用脚本打包" class="headerlink" title="iOS 开发打包静态库.a文件，本人一步步教你用脚本打包"></a>iOS 开发打包静态库.a文件，本人一步步教你用脚本打包</h3><h4 id="准本工作"><a href="#准本工作" class="headerlink" title="准本工作"></a>准本工作</h4><ul><li>创建一个AntKeyBoard的静态工程(AntKeyBoard 替换你项目的名字)</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frryceivddj314k0t8wig.jpg" alt="D51B8026DE03C0B4E121CF0DA29CEBBE"></p><ul><li><p>然后添加一个新Target 选择<code>Cross-platform</code>,新建一个<code>Aggregate</code>,命名为<code>AntKeyBoardShell</code>  </p><a id="more"></a><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frrydjojfnj314k0t80vg.jpg" alt="F635760DF63B28BA2BA7E8301F443D51"></p></li><li><p>添加一个 Run Script</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frrydys9mwj31bu0oowi5.jpg" alt="5C81B64F2B19BE7C49F9B71A6BDF464E"></p></li></ul><ul><li><p>新建一个shell 文件 命名为<code>build_AntKeyBoard_script.sh</code>  </p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryeuixbtj314k0t8ju4.jpg" alt="F39247846890AF9A29EDA447021C4406"></p></li><li><p>目录如下在新建的Run Script写下新建shell文件的路径目录</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frrygpkyv1j31kw0mtaj2.jpg" alt="67DB4EC3EECE6C46B9600CB5B4BC1E20"></p><ul><li><p>编码完成设置需要暴漏出来的头文件</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frrygdrtyjj316a0pcju1.jpg" alt="D6BEA3660941DCAAE0E3BD7EBD2C876F"></p></li></ul><ul><li>添加头文件 并将头文件移动到Public里面</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frryh60ct5j31080j0wfw.jpg" alt="AD994E9F81531DC6721A97FFBAB678F7"></p><p>*最后写入打包脚本（可以粘贴到你的shell文件修改相关配置）运行AntkeyBoardShell 项目<img src="https://ws1.sinaimg.cn/large/006tNc79gy1frryhms21wj3166052dhg.jpg" alt="3647E933D8A781432751493E513474EC"></p><h4 id="需要注意的事项"><a href="#需要注意的事项" class="headerlink" title="需要注意的事项"></a>需要注意的事项</h4><ul><li><p>需要支持所有位数的设备，arm64 armv7 armv7s（配置Build Active Architecture Only）这个配置的作用是开发者可以设置Xcode，仅编译生成满足当前插入的设备的处理器二进制文件。当前插入设备就是你正在用于调试的机器。在日常开发中为了提高编译的速度，我们可以把Debug模式下的设置为<code>YES</code>，但是Release模式下必须设置为<code>NO</code>,否则打包上线的文件可能就会出问题了。</p><p>在开发SDK的时候，我们把所有的都设置为<code>NO</code>,这样打包出来的文件就不会出问题了。</p><p>为了让脚本可以适配Debug和Relaese模式。我们使用Xcode自带的配置变量<code>${CONFIGURATION}</code>。在打包的时候，使用该变量即可。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryj9txfej31io0gk434.jpg" alt="37A4CF148422C47CFD2F388FE96C141E"></p></li></ul><ul><li><p>需要可以配置Debug和Release版本（打包修改这里决定打什么版本）</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryj42yn0j31ds0s0q64.jpg" alt="BDC355D9224F628DDD985B11FA6D39EB"></p></li><li><p>需要支持模拟器和真机</p></li></ul><h4 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">#  build_AntKeyBoard_script.sh</div><div class="line">#  AntKeyBoard</div><div class="line">#</div><div class="line">#  Created by 寇广超 on 2018/5/28.</div><div class="line">#  Copyright © 2018年 寇广超. All rights reserved.</div><div class="line"></div><div class="line">PROJ=$&#123;PROJECT_NAME&#125;.xcodeproj</div><div class="line">LIB_STATIC_NAME=AntKeyBoard #把项目名改为自己的即可使用</div><div class="line">TEMP_DIR=~/Desktop/XcodeTestTempBuild#打包出来的文件的目录，可以自己定义</div><div class="line"></div><div class="line"></div><div class="line">IPHONE_OS_DIR=$&#123;TEMP_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos</div><div class="line">IPHONE_SIMULATOR_DIR=$&#123;TEMP_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator</div><div class="line"></div><div class="line">#创建真机库文件目录</div><div class="line">if [[ ! -d $&#123;IPHONE_OS_DIR&#125; ]]; then</div><div class="line">mkdir -p $&#123;IPHONE_OS_DIR&#125;</div><div class="line">fi</div><div class="line"></div><div class="line">#创建模拟器库文件目录</div><div class="line">if [[ ! -d $&#123;IPHONE_SIMULATOR_DIR&#125; ]]; then</div><div class="line">mkdir -p $&#123;IPHONE_SIMULATOR_DIR&#125;</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line">#编译真机库文件</div><div class="line">xcodebuild -project $&#123;PROJ&#125; \</div><div class="line">-scheme $&#123;LIB_STATIC_NAME&#125; \</div><div class="line">-configuration $&#123;CONFIGURATION&#125; \</div><div class="line">-sdk iphoneos \</div><div class="line">clean \</div><div class="line">build \</div><div class="line">CONFIGURATION_BUILD_DIR=$&#123;IPHONE_OS_DIR&#125;</div><div class="line"># -archivePath $&#123;IPHONE_OS_DIR&#125;</div><div class="line"></div><div class="line">#编译模拟器库文件</div><div class="line">xcodebuild build -project $&#123;PROJ&#125; \</div><div class="line">-scheme $&#123;LIB_STATIC_NAME&#125; \</div><div class="line">-configuration $&#123;CONFIGURATION&#125; \</div><div class="line">-sdk iphonesimulator \</div><div class="line">clean \</div><div class="line">build \</div><div class="line">CONFIGURATION_BUILD_DIR=$&#123;IPHONE_SIMULATOR_DIR&#125;</div><div class="line"># -archivePath $&#123;IPHONE_SIMULATOR_DIR&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 静态库文件</div><div class="line">LIB_NAME=lib$&#123;LIB_STATIC_NAME&#125;.a</div><div class="line"></div><div class="line">#合并模拟器文件和真机文件</div><div class="line">lipo -create $&#123;IPHONE_OS_DIR&#125;/$&#123;LIB_NAME&#125; $&#123;IPHONE_SIMULATOR_DIR&#125;/$&#123;LIB_NAME&#125; -output $&#123;TEMP_DIR&#125;/$&#123;LIB_NAME&#125;</div><div class="line">lipo -info $&#123;LIB_NAME&#125;</div><div class="line"></div><div class="line"></div><div class="line">#拷贝头文件和.a文件到同一目录下</div><div class="line">##建立SDK目录</div><div class="line">pushd $&#123;TEMP_DIR&#125;</div><div class="line">if [[ -d $&#123;LIB_STATIC_NAME&#125; ]]; then</div><div class="line">rm -fR $&#123;LIB_STATIC_NAME&#125;</div><div class="line">fi</div><div class="line"></div><div class="line">mkdir -p $&#123;LIB_STATIC_NAME&#125;</div><div class="line"></div><div class="line">##拷贝.a和头文件</div><div class="line">cp -fR $&#123;LIB_NAME&#125; $&#123;LIB_STATIC_NAME&#125;</div><div class="line">rm -fR $&#123;LIB_NAME&#125;</div><div class="line"></div><div class="line">cp -f $&#123;IPHONE_SIMULATOR_DIR&#125;/include/$&#123;LIB_STATIC_NAME&#125;/*  $&#123;LIB_STATIC_NAME&#125;</div><div class="line"></div><div class="line"></div><div class="line">#打包为zip文件</div><div class="line">PACKAGE_DATE=`date &apos;+%Y%m%d%H&apos;`</div><div class="line">GIT_VERSION=`git log --abbrev-commit|head -1|cut -d&apos; &apos; -f 2`</div><div class="line"></div><div class="line">SDK_ZIP_NAME=iOS_$&#123;LIB_STATIC_NAME&#125;_$&#123;PACKAGE_DATE&#125;_$&#123;GIT_VERSION&#125;_$&#123;CONFIGURATION&#125;.zip</div><div class="line"></div><div class="line">zip -qr $&#123;SDK_ZIP_NAME&#125; $&#123;LIB_STATIC_NAME&#125;</div></pre></td></tr></table></figure><p><img src="/Users/Mrco/Library/Containers/com.tencent.qq/Data/Library/Caches/Images/3647E933D8A781432751493E513474EC.jpg" alt="3647E933D8A781432751493E513474EC"></p><h4 id="ps-这里可能存在的问题就是脚本没有运行的权限，在终端cd到build-AntKeyBoard-script-sh-目录-输入命令"><a href="#ps-这里可能存在的问题就是脚本没有运行的权限，在终端cd到build-AntKeyBoard-script-sh-目录-输入命令" class="headerlink" title="ps 这里可能存在的问题就是脚本没有运行的权限，在终端cd到build_AntKeyBoard_script.sh 目录 输入命令"></a>ps 这里可能存在的问题就是脚本没有运行的权限，在终端cd到<code>build_AntKeyBoard_script.sh</code> 目录 输入命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x build_AntKeyBoard_script.sh</div></pre></td></tr></table></figure><h4 id="对shell文件进行授权-再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug-Release版本。"><a href="#对shell文件进行授权-再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug-Release版本。" class="headerlink" title="对shell文件进行授权,再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug/Release版本。"></a>对shell文件进行授权,再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug/Release版本。</h4><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryjn3ixtj30d80cgq3k.jpg" alt="5A154547DCF6929A089DD353EB586DAA"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iOS-开发打包静态库-a文件，本人一步步教你用脚本打包&quot;&gt;&lt;a href=&quot;#iOS-开发打包静态库-a文件，本人一步步教你用脚本打包&quot; class=&quot;headerlink&quot; title=&quot;iOS 开发打包静态库.a文件，本人一步步教你用脚本打包&quot;&gt;&lt;/a&gt;iOS 开发打包静态库.a文件，本人一步步教你用脚本打包&lt;/h3&gt;&lt;h4 id=&quot;准本工作&quot;&gt;&lt;a href=&quot;#准本工作&quot; class=&quot;headerlink&quot; title=&quot;准本工作&quot;&gt;&lt;/a&gt;准本工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建一个AntKeyBoard的静态工程(AntKeyBoard 替换你项目的名字)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1frryceivddj314k0t8wig.jpg&quot; alt=&quot;D51B8026DE03C0B4E121CF0DA29CEBBE&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;然后添加一个新Target 选择&lt;code&gt;Cross-platform&lt;/code&gt;,新建一个&lt;code&gt;Aggregate&lt;/code&gt;,命名为&lt;code&gt;AntKeyBoardShell&lt;/code&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="打包" scheme="http://cocoblog.site/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>cocopods卸载、安装、重装</title>
    <link href="http://cocoblog.site/cocopods%E5%8D%B8%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E9%87%8D%E8%A3%85.html"/>
    <id>http://cocoblog.site/cocopods卸载、安装、重装.html</id>
    <published>2018-04-17T03:29:34.000Z</published>
    <updated>2018-04-17T05:37:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>###如果升级cocopods不成功建议先卸载</p><h4 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h4><ul><li>卸载命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods</div></pre></td></tr></table></figure><ul><li>在查看之前本地安装cocopods相关东西</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem list --local | grep cocoapods</div></pre></td></tr></table></figure><a id="more"></a><h5 id="会显示："><a href="#会显示：" class="headerlink" title="会显示："></a>会显示：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cocoapods-core (1.5.0)</div><div class="line">cocoapods-deintegrate (1.0.2)</div><div class="line">cocoapods-downloader (1.2.0)</div><div class="line">cocoapods-plugins (1.0.0)</div><div class="line">cocoapods-search (1.0.0)</div><div class="line">cocoapods-stats (1.0.0)</div><div class="line">cocoapods-trunk (1.3.0)</div><div class="line">cocoapods-try (1.1.0)</div></pre></td></tr></table></figure><ul><li>然后用如下命令删除每一个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods-core</div></pre></td></tr></table></figure><ul><li>然后退出终端，重启Finder，cocopods安装完成</li></ul><hr><h3 id="cocopods安装"><a href="#cocopods安装" class="headerlink" title="cocopods安装"></a>cocopods安装</h3><ul><li>查看ruby源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div></pre></td></tr></table></figure><ul><li>移除掉原有的源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -r https://rubygems.org/</div></pre></td></tr></table></figure><ul><li>添加国内最新的源。ruby-china</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -a https://gems.ruby-china.org</div></pre></td></tr></table></figure><ul><li>是否添加成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div></pre></td></tr></table></figure><ul><li>安装cocoapods</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods（步骤有点慢，不要急）</div></pre></td></tr></table></figure><ul><li>安装完成后查看pod版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod --version</div></pre></td></tr></table></figure><ul><li>更新Podspec索引文件，创建本地索引库（这里要多等一会儿）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup（步骤有点慢，不要急）</div></pre></td></tr></table></figure><ul><li>进入项目目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd xxx/xxx</div></pre></td></tr></table></figure><ul><li>创建Podfile文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch Podfile (或者 pod init)</div></pre></td></tr></table></figure><ul><li>编辑Podfile文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi Podfile ()</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">target &apos;NEW_BSBDJ&apos; do</div><div class="line"></div><div class="line">  pod &apos;AFNetworking&apos;</div><div class="line"></div><div class="line">  pod &apos;MJExtension&apos;</div><div class="line"></div><div class="line">  pod &apos;MJRefresh&apos;</div><div class="line"></div><div class="line">  pod &apos;SDWebImage&apos;</div><div class="line"></div><div class="line">  pod &apos;SVProgressHUD&apos;</div><div class="line"></div><div class="line">end</div><div class="line">输入:wq保存退出或者shift+z+z保存退出vi编辑器</div></pre></td></tr></table></figure><ul><li>安装依赖库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install(后续添加框架可直接pod update)</div></pre></td></tr></table></figure><hr><h3 id="设置rvm以及ruby版本"><a href="#设置rvm以及ruby版本" class="headerlink" title="设置rvm以及ruby版本"></a>设置rvm以及ruby版本</h3><h4 id="rvm"><a href="#rvm" class="headerlink" title="rvm"></a>rvm</h4><ul><li>安装RVM (期间可能会问你sudo管理员密码，以及自动通过homebrew安装依赖包，等待一段时间后就可以成功安装好 RVM)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://get.rvm.io | bash -s stable</div></pre></td></tr></table></figure><ul><li>载入 RVM 环境（新开 Termal 就不用这么做了，会自动重新载入的）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.rvm/scripts/rvm</div></pre></td></tr></table></figure><ul><li>检查是否安装正确</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm -v</div></pre></td></tr></table></figure><h4 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h4><ul><li>用RVM安装Ruby环境,列出已知的ruby版本（同样继续等待漫长的下载，编译过程，完成以后，Ruby, Ruby Gems 就安装好了）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm list known</div></pre></td></tr></table></figure><ul><li>选择版本安装例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm install 2.4.1</div></pre></td></tr></table></figure><ul><li>查询已经安装的ruby</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm list</div></pre></td></tr></table></figure><ul><li>卸载一个已安装版本 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm remove 2.4.1</div></pre></td></tr></table></figure><ul><li>设置ruby版本rvm 装好以后，需要执行下面的命令将指定版本的 ruby 设置为系统默认版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm 2.4.1 --default</div></pre></td></tr></table></figure><ul><li>测试是否正确</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ruby -v</div><div class="line">gem -v</div></pre></td></tr></table></figure><p>愉快的使用cocopods吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###如果升级cocopods不成功建议先卸载&lt;/p&gt;
&lt;h4 id=&quot;卸载步骤&quot;&gt;&lt;a href=&quot;#卸载步骤&quot; class=&quot;headerlink&quot; title=&quot;卸载步骤&quot;&gt;&lt;/a&gt;卸载步骤&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;卸载命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo gem uninstall cocoapods&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在查看之前本地安装cocopods相关东西&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ gem list --local | grep cocoapods&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="cocopods" scheme="http://cocoblog.site/tags/cocopods/"/>
    
  </entry>
  
  <entry>
    <title>error: RPC failed; curl 18 transfer closed with outstanding read data remaining</title>
    <link href="http://cocoblog.site/error-RPC-failed-curl-18-transfer-closed-with-outstanding-read-data-remaining.html"/>
    <id>http://cocoblog.site/error-RPC-failed-curl-18-transfer-closed-with-outstanding-read-data-remaining.html</id>
    <published>2018-04-03T06:41:04.000Z</published>
    <updated>2018-04-03T07:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误："><a href="#最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：" class="headerlink" title="最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误："></a>最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</div><div class="line">fatal: The remote end hung up unexpectedly</div><div class="line">fatal: early EOF</div><div class="line">fatal: index-pack failed</div></pre></td></tr></table></figure><a id="more"></a><h4 id="原因说明"><a href="#原因说明" class="headerlink" title="原因说明:"></a>原因说明:</h4><h4 id="我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。"><a href="#我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。" class="headerlink" title="我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。"></a>我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。</h4><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global http.postBuffer 524288000</div></pre></td></tr></table></figure><h4 id="524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。"><a href="#524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。" class="headerlink" title="524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。"></a>524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。</h4><hr><h4 id="也可以用如下命令查看是否配置成功："><a href="#也可以用如下命令查看是否配置成功：" class="headerlink" title="也可以用如下命令查看是否配置成功："></a>也可以用如下命令查看是否配置成功：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&quot;&gt;&lt;a href=&quot;#最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&quot; class=&quot;headerlink&quot; title=&quot;最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&quot;&gt;&lt;/a&gt;最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;error: RPC failed; curl 18 transfer closed with outstanding read data remaining&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fatal: The remote end hung up unexpectedly&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fatal: early EOF&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fatal: index-pack failed&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://cocoblog.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>tableView setion  cell加边框圆角</title>
    <link href="http://cocoblog.site/tableView-setion-cell%E5%8A%A0%E8%BE%B9%E6%A1%86%E5%9C%86%E8%A7%92.html"/>
    <id>http://cocoblog.site/tableView-setion-cell加边框圆角.html</id>
    <published>2017-10-12T03:23:14.000Z</published>
    <updated>2017-10-12T03:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>###最近项目UI需求tableViewCell 带圆角边框，自己写了下像平常那样去设置圆角边框行不通网上差了一下自己又改进一下，废话不多说先看图在撸代码。<br>图片效果如下：<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2042941-f77ffeb618445f20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="51499150024_.pic副本.jpg"></p><hr><p>###实现上面效果暂时想到两种办法：</p><p>####一、cell重绘给section，绘制边框。可以构建基类或者写在category里面，方便使用代码如下：<br>可直接复制代码到项目中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">// 这里要判断分组列表中的第一行，每组section的第一行，每组section的中间行</div><div class="line"></div><div class="line">// CGPathAddRoundedRect(pathRef, nil, bounds, cornerRadius, cornerRadius);</div><div class="line">if (indexPath.section == 2) &#123;</div><div class="line">// 圆角弧度半径</div><div class="line">CGFloat cornerRadius = 3.f;</div><div class="line">// 设置cell的背景色为透明，如果不设置这个的话，则原来的背景色不会被覆盖</div><div class="line">cell.backgroundColor = UIColor.clearColor;</div><div class="line"></div><div class="line">// 创建一个shapeLayer</div><div class="line">CAShapeLayer *layer = [[CAShapeLayer alloc] init];</div><div class="line">CAShapeLayer *backgroundLayer = [[CAShapeLayer alloc] init]; //显示选中</div><div class="line">// 创建一个可变的图像Path句柄，该路径用于保存绘图信息</div><div class="line">CGMutablePathRef pathRef = CGPathCreateMutable();</div><div class="line">// 获取cell的size</div><div class="line">// 第一个参数,是整个 cell 的 bounds, 第二个参数是距左右两端的距离,第三个参数是距上下两端的距离</div><div class="line">CGRect bounds = CGRectInset(cell.bounds, 10, 0);</div><div class="line"></div><div class="line">// CGRectGetMinY：返回对象顶点坐标</div><div class="line">// CGRectGetMaxY：返回对象底点坐标</div><div class="line">// CGRectGetMinX：返回对象左边缘坐标</div><div class="line">// CGRectGetMaxX：返回对象右边缘坐标</div><div class="line">// CGRectGetMidX: 返回对象中心点的X坐标</div><div class="line">// CGRectGetMidY: 返回对象中心点的Y坐标</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section]-1) &#123;</div><div class="line">CGPathAddRoundedRect(pathRef, nil, bounds, cornerRadius, cornerRadius);</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">// 初始起点为cell的左下角坐标</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds));</div><div class="line">// 起始坐标为左下角，设为p，（CGRectGetMinX(bounds), CGRectGetMinY(bounds)）为左上角的点，设为p1(x1,y1)，(CGRectGetMidX(bounds), CGRectGetMinY(bounds))为顶部中点的点，设为p2(x2,y2)。然后连接p1和p2为一条直线l1，连接初始点p到p1成一条直线l，则在两条直线相交处绘制弧度为r的圆角。</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds), CGRectGetMidX(bounds), CGRectGetMinY(bounds), cornerRadius);</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds), CGRectGetMaxX(bounds), CGRectGetMidY(bounds), cornerRadius);</div><div class="line"></div><div class="line">// 终点坐标为右下角坐标点，把绘图信息都放到路径中去,根据这些路径就构成了一块区域了</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds));</div><div class="line">//            CGPathCloseSubpath(pathRef);</div><div class="line"></div><div class="line">&#125; else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section]-1) &#123;</div><div class="line">//</div><div class="line">// 初始起点为cell的左上角坐标</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds), CGRectGetMidX(bounds), CGRectGetMaxY(bounds), cornerRadius);</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds), CGRectGetMaxX(bounds), CGRectGetMidY(bounds), cornerRadius);</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds));</div><div class="line">//            CGPathCloseSubpath(pathRef);</div><div class="line"></div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line">// 添加cell的rectangle信息到path中（不包括圆角）</div><div class="line">//            CGPathAddRect(pathRef, nil, bounds);</div><div class="line"></div><div class="line">//假如只要边框</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds));</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds));</div><div class="line">&#125;</div><div class="line">// 把已经绘制好的可变图像路径赋值给图层，然后图层根据这图像path进行图像渲染render</div><div class="line">layer.path = pathRef;</div><div class="line">backgroundLayer.path = pathRef;</div><div class="line"></div><div class="line">// 注意：但凡通过Quartz2D中带有creat/copy/retain方法创建出来的值都必须要释放</div><div class="line">CFRelease(pathRef);</div><div class="line">// 按照shape layer的path填充颜色，类似于渲染render</div><div class="line">layer.lineWidth = 0.5f;//线的宽度</div><div class="line">layer.strokeColor = [UIColor colorWithHex:@&quot;#cccccc&quot;].CGColor;//线的颜色</div><div class="line">layer.fillColor = [UIColor whiteColor].CGColor;//cellcell背景色</div><div class="line">// view大小与cell一致</div><div class="line">UIView *roundView = [[UIView alloc] initWithFrame:bounds];</div><div class="line">// 添加自定义圆角后的图层到roundView中</div><div class="line">[roundView.layer insertSublayer:layer atIndex:0];</div><div class="line">roundView.backgroundColor = UIColor.clearColor;</div><div class="line">// cell的背景view</div><div class="line">cell.backgroundView = roundView;</div><div class="line">cell.backgroundColor = [UIColor whiteColor];</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p></p><p></p><p>####二、自定义一个BaseCell作为基类，由它承载边框的实现；然后再继承于BaseBorderCell自定义cell进行内容展示；</p><p><hr><ul><li>BaseBorderCell.h文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//此cell只简单负责border的配置，cell中的内容可以继承于此类再进行封装</div><div class="line"></div><div class="line">typedef NS_ENUM(NSUInteger, BaseCellBorderStyle) &#123;</div><div class="line">BaseCellBorderStyleNoRound = 0,</div><div class="line">BaseCellBorderStyleTopRound,</div><div class="line">BaseCellBorderStyleBottomRound,</div><div class="line">BaseCellBorderStyleAllRound,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface BaseBorderCell : UITableViewCell</div><div class="line"></div><div class="line">@property (nonatomic, assign) BaseCellBorderStyle borderStyle;//边框类型</div><div class="line">@property (nonatomic, strong) UIColor *contentBorderColor;//边框颜色</div><div class="line">@property (nonatomic, strong) UIColor *contentBackgroundColor;//边框内部内容颜色</div><div class="line">@property (nonatomic, assign) CGFloat contentBorderWidth;//边框的宽度，这个宽度的一半会延伸到外部，如果对宽度比较敏感的要注意下</div><div class="line">@property (nonatomic, assign) CGFloat contentMargin;//左右距离父视图的边距</div><div class="line">@property (nonatomic, assign) CGSize contentCornerRadius;//边框的圆角</div><div class="line"></div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath;</div><div class="line">//如果不想用上面的方法初始化cell，就用下面的方法设置borderStyle</div><div class="line">- (void)setBorderStyleWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath;</div><div class="line">@end</div></pre></td></tr></table></figure><ul><li>BaseBorderCell.m文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line">#import &quot;BaseBorderCell.h&quot;</div><div class="line"></div><div class="line">#define Width self.contentView.frame.size.width</div><div class="line">#define Height self.contentView.frame.size.height</div><div class="line"></div><div class="line">@implementation BaseBorderCell</div><div class="line">//</div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">BaseBorderCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;cell&quot;];</div><div class="line">if (!cell) &#123;</div><div class="line">cell = [[BaseBorderCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@&quot;cell&quot;];</div><div class="line">&#125;</div><div class="line">//一定要这里设置style，而不能在上面的判断里面，因为cell重用的时候，只要有不同的地方都应该重新设置，否则拿到cell的style就是上一个的样式而自己却没有进行修改</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleAllRound;</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleTopRound;</div><div class="line">&#125;else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleBottomRound;</div><div class="line">&#125;else &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleNoRound;</div><div class="line">&#125;</div><div class="line">return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier</div><div class="line">&#123;</div><div class="line">self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];</div><div class="line">if (self) &#123;</div><div class="line">//配置默认值</div><div class="line">self.contentBorderColor = [UIColor lightGrayColor];</div><div class="line">self.contentBackgroundColor = [UIColor whiteColor];</div><div class="line">self.contentBorderWidth = 2.0;</div><div class="line">self.contentMargin = 10.0;</div><div class="line">self.contentCornerRadius = CGSizeMake(5, 5);</div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setBorderStyleWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleAllRound;</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleTopRound;</div><div class="line">&#125;else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleBottomRound;</div><div class="line">&#125;else &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleNoRound;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)layoutSubviews</div><div class="line">&#123;</div><div class="line">[super layoutSubviews];</div><div class="line">//在这里设置才能获取到真正显示时候的宽度，而不是原始的</div><div class="line">[self setupBorder];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setupBorder</div><div class="line">&#123;</div><div class="line">self.selectionStyle = UITableViewCellSelectionStyleNone;</div><div class="line">self.backgroundColor = [UIColor clearColor];</div><div class="line"></div><div class="line">CAShapeLayer *layer = [CAShapeLayer layer];</div><div class="line">layer.lineWidth = self.contentBorderWidth;</div><div class="line">layer.strokeColor = self.contentBorderColor.CGColor;</div><div class="line">layer.fillColor =  self.contentBackgroundColor.CGColor;</div><div class="line"></div><div class="line">UIView *view = [[UIView alloc] initWithFrame:self.contentView.bounds];</div><div class="line">[view.layer insertSublayer:layer atIndex:0];</div><div class="line">view.backgroundColor = [UIColor clearColor];</div><div class="line">//用自定义的view代替cell的backgroundView</div><div class="line">self.backgroundView = view;</div><div class="line"></div><div class="line">CGRect rect = CGRectMake(self.contentMargin, 0, Width - 2*self.contentMargin, Height);</div><div class="line">switch (self.borderStyle) &#123;</div><div class="line">case BaseCellBorderStyleNoRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRect:rect];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleTopRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleBottomRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerBottomLeft | UIRectCornerBottomRight cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleAllRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerAllCorners cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">default:</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p><p>###个人喜欢第一种简单高效副作用小</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###最近项目UI需求tableViewCell 带圆角边框，自己写了下像平常那样去设置圆角边框行不通网上差了一下自己又改进一下，废话不多说先看图在撸代码。&lt;br&gt;图片效果如下：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自动查找项目中不用的图片资源 </title>
    <link href="http://cocoblog.site/iOS%E8%87%AA%E5%8A%A8%E6%9F%A5%E6%89%BE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%8D%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90.html"/>
    <id>http://cocoblog.site/iOS自动查找项目中不用的图片资源.html</id>
    <published>2017-10-12T03:15:01.000Z</published>
    <updated>2018-04-03T06:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>####项目上线资源包比较大，要做瘦身，首先想到是删除项目中不用的图片资源，去github上搜索了比较好用的项目资源，比较好用分享给大家，简单好用<br><a id="more"></a></p><p>####1.去github上下载<a href="https://github.com/Cocowyr/LSUnusedResources" target="_blank" rel="external">LSUnusedResources</a></p><p>####2.运行LSUnusedResources项目，运行结果如下</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-024524d56cbe274f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####3.点击dock中的项目图标</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-68acdf6c1bfb85b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####4.上传项目路径</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-689f529d3fb55742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####5.点击search</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-0e9ad76c59a3e87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####6.delete掉没有用的资源图片</p><p>###注意：删除的时候要谨慎！别什么图都删了，看看对项目有没有作用。这个插件有时也会有一定的误差。但总体来说非常好用。</p><p>##</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####项目上线资源包比较大，要做瘦身，首先想到是删除项目中不用的图片资源，去github上搜索了比较好用的项目资源，比较好用分享给大家，简单好用&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://cocoblog.site/categories/iOS/"/>
    
    
      <category term="iOS优化" scheme="http://cocoblog.site/tags/iOS%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cocoblog.site/hello-world.html"/>
    <id>http://cocoblog.site/hello-world.html</id>
    <published>2017-10-11T06:55:02.000Z</published>
    <updated>2017-10-11T06:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
