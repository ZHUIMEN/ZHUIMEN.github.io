<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小崔带你飞 ~</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cuijiajun.xin/"/>
  <updated>2018-06-29T01:31:41.000Z</updated>
  <id>http://www.cuijiajun.xin/</id>
  
  <author>
    <name>cuijian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git合并分支到master</title>
    <link href="http://www.cuijiajun.xin/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E5%88%B0master.html"/>
    <id>http://www.cuijiajun.xin/git合并分支到master.html</id>
    <published>2018-06-29T01:26:34.000Z</published>
    <updated>2018-06-29T01:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在dev分支上，刚开发完项目-需要合并到master-需要如下步骤"><a href="#在dev分支上，刚开发完项目-需要合并到master-需要如下步骤" class="headerlink" title="在dev分支上，刚开发完项目,需要合并到master,需要如下步骤:"></a>在dev分支上，刚开发完项目,需要合并到master,需要如下步骤:</h4><ul><li>提交修改到dev</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git  add .</div><div class="line">git  commit -m ‘dev&apos;</div><div class="line">git push -u origin dev</div></pre></td></tr></table></figure><ul><li>合并到master</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git  checkout master #切换到master分支上</div><div class="line">git pull origin master #把远程master上的代码pull下来</div><div class="line">git  merge dev #把dev分支的代码合并到master上</div><div class="line">git status #然后查看状态</div><div class="line">git push origin master #把commit push到远程master上</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在dev分支上，刚开发完项目-需要合并到master-需要如下步骤&quot;&gt;&lt;a href=&quot;#在dev分支上，刚开发完项目-需要合并到master-需要如下步骤&quot; class=&quot;headerlink&quot; title=&quot;在dev分支上，刚开发完项目,需要合并到master
      
    
    </summary>
    
    
      <category term="git" scheme="http://www.cuijiajun.xin/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git 添加tag</title>
    <link href="http://www.cuijiajun.xin/git-%E6%B7%BB%E5%8A%A0tag.html"/>
    <id>http://www.cuijiajun.xin/git-添加tag.html</id>
    <published>2018-06-27T06:47:00.000Z</published>
    <updated>2018-06-27T09:12:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令"><a href="#标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令" class="headerlink" title="标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令"></a>标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令</h3><ul><li>查看标签</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag # 打印出当前仓库的所有tag</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -l v1.0 # 打印符合检索条件的标签</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show v1.0 # 查看Tag的版本信息</div></pre></td></tr></table></figure><hr><a id="more"></a><ul><li>创建本地标签 (git tag分为两种类型：轻量tag和附注tag。轻量tag是指向提交对象的引用，附注Tag则是仓库中的一个独立对象。建议使用附注Tag)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag v1.0 -light   # 轻量tag</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a v1.0 -m &quot;发布版本&quot;   # 附注tag</div></pre></td></tr></table></figure><ul><li>给commit 加Tag(打Tag不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的SHA（通过git log获取)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a v1.0 0c3b62d -m &quot;补打 v1.0&quot;将本地标签提交到远程仓库</div></pre></td></tr></table></figure><hr><ul><li>将本地标签提交到远程仓库(前面所提到的创建标签，只是将标签添加到了本地的版本管理，我们需要在创建之后将本地标签同步到远程仓库)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --tags  #推送所有标签</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin v1.0  # 将v1.0 Tag提交到git服务器</div></pre></td></tr></table></figure><hr><ul><li>切换到Tag</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout v1.0. #与切换分支命令相同</div></pre></td></tr></table></figure><hr><ul><li><p>删除本地Tag(误打或需要修改Tag时，需要先将Tag删除，再打新Tag)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -d v1.0 # 删除Tag</div></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete v1.0  # 同创建本地标签一样，删除了本地标签之后也要同时删除远程仓库的标签。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令&quot;&gt;&lt;a href=&quot;#标签-Tag-可以针对某一时间点的版本做标记-常用于版本发布-以下为Tag-的常用命令&quot; class=&quot;headerlink&quot; title=&quot;标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令&quot;&gt;&lt;/a&gt;标签(Tag)可以针对某一时间点的版本做标记,常用于版本发布,以下为Tag 的常用命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git tag # 打印出当前仓库的所有tag&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git tag -l v1.0 # 打印符合检索条件的标签&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git show v1.0 # 查看Tag的版本信息&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.cuijiajun.xin/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>app上线到App Store之后的链接地址</title>
    <link href="http://www.cuijiajun.xin/app%E4%B8%8A%E7%BA%BF%E5%88%B0App-Store%E4%B9%8B%E5%90%8E%E7%9A%84%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80.html"/>
    <id>http://www.cuijiajun.xin/app上线到App-Store之后的链接地址.html</id>
    <published>2018-06-26T02:21:25.000Z</published>
    <updated>2018-06-26T02:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://itunes.apple.com/cn/app/id1396313134?mt=8" target="_blank" rel="external">https://itunes.apple.com/cn/app/id1396313134?mt=8</a></p><p>把id改成自己app的id就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/id1396313134?mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itunes.apple.com/cn/app/id1396313134?m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS开发上传App Store时候一直卡在 Authenticating with the iTunes Store 的解决办法</title>
    <link href="http://www.cuijiajun.xin/iOS%E5%BC%80%E5%8F%91%E4%B8%8A%E4%BC%A0App-Store%E6%97%B6%E5%80%99%E4%B8%80%E7%9B%B4%E5%8D%A1%E5%9C%A8-Authenticating-with-the-iTunes-Store-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
    <id>http://www.cuijiajun.xin/iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法.html</id>
    <published>2018-06-25T01:46:16.000Z</published>
    <updated>2018-06-25T01:59:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法"><a href="#iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法" class="headerlink" title="iOS开发上传App Store时候一直卡在 Authenticating with the iTunes Store 的解决办法"></a>iOS开发上传App Store时候一直卡在 Authenticating with the iTunes Store 的解决办法</h3><p>####今天上传项目的时候出现一直卡死在 Authenticating with the iTunes Store 这个步骤 与网络无关, 搜索了下<a href="https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin" target="_blank" rel="external">stack</a></p><h4 id="需要执行下面三个步骤"><a href="#需要执行下面三个步骤" class="headerlink" title="需要执行下面三个步骤"></a>需要执行下面三个步骤</h4><ol><li><p>cd ~  </p></li><li><p>mv .itmstransporter/ .old_itmstransporter/  </p></li><li><p>“/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter” </p></li></ol><h4 id="当终端命令全部执行完毕-在上传就可以了"><a href="#当终端命令全部执行完毕-在上传就可以了" class="headerlink" title="当终端命令全部执行完毕,在上传就可以了"></a>当终端命令全部执行完毕,在上传就可以了</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-Store-的解决办法&quot;&gt;&lt;a href=&quot;#iOS开发上传App-Store时候一直卡在-Authenticating-with-the-iTunes-S
      
    
    </summary>
    
    
      <category term="打包" scheme="http://www.cuijiajun.xin/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>git拉取远程分支并创建本地分支</title>
    <link href="http://www.cuijiajun.xin/git%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.html"/>
    <id>http://www.cuijiajun.xin/git拉取远程分支并创建本地分支.html</id>
    <published>2018-05-29T01:39:09.000Z</published>
    <updated>2018-05-29T01:55:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git拉取远程分支并创建本地分支"><a href="#git拉取远程分支并创建本地分支" class="headerlink" title="git拉取远程分支并创建本地分支"></a>git拉取远程分支并创建本地分支</h3><ul><li>使用如下git命令查看所有远程分支：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r ///</div></pre></td></tr></table></figure><ul><li>拉取远程分支并创建本地分支使用如下命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b 本地分支名x origin/远程分支名x</div></pre></td></tr></table></figure><p>使用该方式会在本地新建分支x，并自动切换到该本地分支x</p><a id="more"></a><p><strong>采用此种方法建立的本地分支会和远程分支建立映射关系</strong>。</p><ul><li>或者使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin 远程分支名x:本地分支名x</div></pre></td></tr></table></figure><p>使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout.</p><p><strong>采用此种方法建立的本地分支不会和远程分支建立映射关系。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git拉取远程分支并创建本地分支&quot;&gt;&lt;a href=&quot;#git拉取远程分支并创建本地分支&quot; class=&quot;headerlink&quot; title=&quot;git拉取远程分支并创建本地分支&quot;&gt;&lt;/a&gt;git拉取远程分支并创建本地分支&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用如下git命令查看所有远程分支：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git branch -r ///&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;拉取远程分支并创建本地分支使用如下命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b 本地分支名x origin/远程分支名x&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用该方式会在本地新建分支x，并自动切换到该本地分支x&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.cuijiajun.xin/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>iOS静态库打包</title>
    <link href="http://www.cuijiajun.xin/iOS%E9%9D%99%E6%80%81%E5%BA%93%E6%89%93%E5%8C%85.html"/>
    <id>http://www.cuijiajun.xin/iOS静态库打包.html</id>
    <published>2018-05-28T09:08:57.000Z</published>
    <updated>2018-05-29T01:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS-开发打包静态库-a文件，本人一步步教你用脚本打包"><a href="#iOS-开发打包静态库-a文件，本人一步步教你用脚本打包" class="headerlink" title="iOS 开发打包静态库.a文件，本人一步步教你用脚本打包"></a>iOS 开发打包静态库.a文件，本人一步步教你用脚本打包</h3><h4 id="准本工作"><a href="#准本工作" class="headerlink" title="准本工作"></a>准本工作</h4><ul><li>创建一个AntKeyBoard的静态工程(AntKeyBoard 替换你项目的名字)</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frryceivddj314k0t8wig.jpg" alt="D51B8026DE03C0B4E121CF0DA29CEBBE"></p><ul><li><p>然后添加一个新Target 选择<code>Cross-platform</code>,新建一个<code>Aggregate</code>,命名为<code>AntKeyBoardShell</code>  </p><a id="more"></a><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frrydjojfnj314k0t80vg.jpg" alt="F635760DF63B28BA2BA7E8301F443D51"></p></li><li><p>添加一个 Run Script</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frrydys9mwj31bu0oowi5.jpg" alt="5C81B64F2B19BE7C49F9B71A6BDF464E"></p></li></ul><ul><li><p>新建一个shell 文件 命名为<code>build_AntKeyBoard_script.sh</code>  </p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryeuixbtj314k0t8ju4.jpg" alt="F39247846890AF9A29EDA447021C4406"></p></li><li><p>目录如下在新建的Run Script写下新建shell文件的路径目录</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frrygpkyv1j31kw0mtaj2.jpg" alt="67DB4EC3EECE6C46B9600CB5B4BC1E20"></p><ul><li><p>编码完成设置需要暴漏出来的头文件</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frrygdrtyjj316a0pcju1.jpg" alt="D6BEA3660941DCAAE0E3BD7EBD2C876F"></p></li></ul><ul><li>添加头文件 并将头文件移动到Public里面</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frryh60ct5j31080j0wfw.jpg" alt="AD994E9F81531DC6721A97FFBAB678F7"></p><p>*最后写入打包脚本（可以粘贴到你的shell文件修改相关配置）运行AntkeyBoardShell 项目<img src="https://ws1.sinaimg.cn/large/006tNc79gy1frryhms21wj3166052dhg.jpg" alt="3647E933D8A781432751493E513474EC"></p><h4 id="需要注意的事项"><a href="#需要注意的事项" class="headerlink" title="需要注意的事项"></a>需要注意的事项</h4><ul><li><p>需要支持所有位数的设备，arm64 armv7 armv7s（配置Build Active Architecture Only）这个配置的作用是开发者可以设置Xcode，仅编译生成满足当前插入的设备的处理器二进制文件。当前插入设备就是你正在用于调试的机器。在日常开发中为了提高编译的速度，我们可以把Debug模式下的设置为<code>YES</code>，但是Release模式下必须设置为<code>NO</code>,否则打包上线的文件可能就会出问题了。</p><p>在开发SDK的时候，我们把所有的都设置为<code>NO</code>,这样打包出来的文件就不会出问题了。</p><p>为了让脚本可以适配Debug和Relaese模式。我们使用Xcode自带的配置变量<code>${CONFIGURATION}</code>。在打包的时候，使用该变量即可。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryj9txfej31io0gk434.jpg" alt="37A4CF148422C47CFD2F388FE96C141E"></p></li></ul><ul><li><p>需要可以配置Debug和Release版本（打包修改这里决定打什么版本）</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryj42yn0j31ds0s0q64.jpg" alt="BDC355D9224F628DDD985B11FA6D39EB"></p></li><li><p>需要支持模拟器和真机</p></li></ul><h4 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">#  build_AntKeyBoard_script.sh</div><div class="line">#  AntKeyBoard</div><div class="line">#</div><div class="line">#  Created by 寇广超 on 2018/5/28.</div><div class="line">#  Copyright © 2018年 寇广超. All rights reserved.</div><div class="line"></div><div class="line">PROJ=$&#123;PROJECT_NAME&#125;.xcodeproj</div><div class="line">LIB_STATIC_NAME=AntKeyBoard #把项目名改为自己的即可使用</div><div class="line">TEMP_DIR=~/Desktop/XcodeTestTempBuild#打包出来的文件的目录，可以自己定义</div><div class="line"></div><div class="line"></div><div class="line">IPHONE_OS_DIR=$&#123;TEMP_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos</div><div class="line">IPHONE_SIMULATOR_DIR=$&#123;TEMP_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator</div><div class="line"></div><div class="line">#创建真机库文件目录</div><div class="line">if [[ ! -d $&#123;IPHONE_OS_DIR&#125; ]]; then</div><div class="line">mkdir -p $&#123;IPHONE_OS_DIR&#125;</div><div class="line">fi</div><div class="line"></div><div class="line">#创建模拟器库文件目录</div><div class="line">if [[ ! -d $&#123;IPHONE_SIMULATOR_DIR&#125; ]]; then</div><div class="line">mkdir -p $&#123;IPHONE_SIMULATOR_DIR&#125;</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line">#编译真机库文件</div><div class="line">xcodebuild -project $&#123;PROJ&#125; \</div><div class="line">-scheme $&#123;LIB_STATIC_NAME&#125; \</div><div class="line">-configuration $&#123;CONFIGURATION&#125; \</div><div class="line">-sdk iphoneos \</div><div class="line">clean \</div><div class="line">build \</div><div class="line">CONFIGURATION_BUILD_DIR=$&#123;IPHONE_OS_DIR&#125;</div><div class="line"># -archivePath $&#123;IPHONE_OS_DIR&#125;</div><div class="line"></div><div class="line">#编译模拟器库文件</div><div class="line">xcodebuild build -project $&#123;PROJ&#125; \</div><div class="line">-scheme $&#123;LIB_STATIC_NAME&#125; \</div><div class="line">-configuration $&#123;CONFIGURATION&#125; \</div><div class="line">-sdk iphonesimulator \</div><div class="line">clean \</div><div class="line">build \</div><div class="line">CONFIGURATION_BUILD_DIR=$&#123;IPHONE_SIMULATOR_DIR&#125;</div><div class="line"># -archivePath $&#123;IPHONE_SIMULATOR_DIR&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 静态库文件</div><div class="line">LIB_NAME=lib$&#123;LIB_STATIC_NAME&#125;.a</div><div class="line"></div><div class="line">#合并模拟器文件和真机文件</div><div class="line">lipo -create $&#123;IPHONE_OS_DIR&#125;/$&#123;LIB_NAME&#125; $&#123;IPHONE_SIMULATOR_DIR&#125;/$&#123;LIB_NAME&#125; -output $&#123;TEMP_DIR&#125;/$&#123;LIB_NAME&#125;</div><div class="line">lipo -info $&#123;LIB_NAME&#125;</div><div class="line"></div><div class="line"></div><div class="line">#拷贝头文件和.a文件到同一目录下</div><div class="line">##建立SDK目录</div><div class="line">pushd $&#123;TEMP_DIR&#125;</div><div class="line">if [[ -d $&#123;LIB_STATIC_NAME&#125; ]]; then</div><div class="line">rm -fR $&#123;LIB_STATIC_NAME&#125;</div><div class="line">fi</div><div class="line"></div><div class="line">mkdir -p $&#123;LIB_STATIC_NAME&#125;</div><div class="line"></div><div class="line">##拷贝.a和头文件</div><div class="line">cp -fR $&#123;LIB_NAME&#125; $&#123;LIB_STATIC_NAME&#125;</div><div class="line">rm -fR $&#123;LIB_NAME&#125;</div><div class="line"></div><div class="line">cp -f $&#123;IPHONE_SIMULATOR_DIR&#125;/include/$&#123;LIB_STATIC_NAME&#125;/*  $&#123;LIB_STATIC_NAME&#125;</div><div class="line"></div><div class="line"></div><div class="line">#打包为zip文件</div><div class="line">PACKAGE_DATE=`date &apos;+%Y%m%d%H&apos;`</div><div class="line">GIT_VERSION=`git log --abbrev-commit|head -1|cut -d&apos; &apos; -f 2`</div><div class="line"></div><div class="line">SDK_ZIP_NAME=iOS_$&#123;LIB_STATIC_NAME&#125;_$&#123;PACKAGE_DATE&#125;_$&#123;GIT_VERSION&#125;_$&#123;CONFIGURATION&#125;.zip</div><div class="line"></div><div class="line">zip -qr $&#123;SDK_ZIP_NAME&#125; $&#123;LIB_STATIC_NAME&#125;</div></pre></td></tr></table></figure><p><img src="/Users/Mrco/Library/Containers/com.tencent.qq/Data/Library/Caches/Images/3647E933D8A781432751493E513474EC.jpg" alt="3647E933D8A781432751493E513474EC"></p><h4 id="ps-这里可能存在的问题就是脚本没有运行的权限，在终端cd到build-AntKeyBoard-script-sh-目录-输入命令"><a href="#ps-这里可能存在的问题就是脚本没有运行的权限，在终端cd到build-AntKeyBoard-script-sh-目录-输入命令" class="headerlink" title="ps 这里可能存在的问题就是脚本没有运行的权限，在终端cd到build_AntKeyBoard_script.sh 目录 输入命令"></a>ps 这里可能存在的问题就是脚本没有运行的权限，在终端cd到<code>build_AntKeyBoard_script.sh</code> 目录 输入命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x build_AntKeyBoard_script.sh</div></pre></td></tr></table></figure><h4 id="对shell文件进行授权-再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug-Release版本。"><a href="#对shell文件进行授权-再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug-Release版本。" class="headerlink" title="对shell文件进行授权,再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug/Release版本。"></a>对shell文件进行授权,再次运行即可。运行成功后，即可看到包打好了。文件的命名包括静态库名字，日期，Debug/Release版本。</h4><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frryjn3ixtj30d80cgq3k.jpg" alt="5A154547DCF6929A089DD353EB586DAA"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iOS-开发打包静态库-a文件，本人一步步教你用脚本打包&quot;&gt;&lt;a href=&quot;#iOS-开发打包静态库-a文件，本人一步步教你用脚本打包&quot; class=&quot;headerlink&quot; title=&quot;iOS 开发打包静态库.a文件，本人一步步教你用脚本打包&quot;&gt;&lt;/a&gt;iOS 开发打包静态库.a文件，本人一步步教你用脚本打包&lt;/h3&gt;&lt;h4 id=&quot;准本工作&quot;&gt;&lt;a href=&quot;#准本工作&quot; class=&quot;headerlink&quot; title=&quot;准本工作&quot;&gt;&lt;/a&gt;准本工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建一个AntKeyBoard的静态工程(AntKeyBoard 替换你项目的名字)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1frryceivddj314k0t8wig.jpg&quot; alt=&quot;D51B8026DE03C0B4E121CF0DA29CEBBE&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;然后添加一个新Target 选择&lt;code&gt;Cross-platform&lt;/code&gt;,新建一个&lt;code&gt;Aggregate&lt;/code&gt;,命名为&lt;code&gt;AntKeyBoardShell&lt;/code&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="打包" scheme="http://www.cuijiajun.xin/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>jq常用的总结</title>
    <link href="http://www.cuijiajun.xin/jq.html"/>
    <id>http://www.cuijiajun.xin/jq.html</id>
    <published>2018-05-28T09:08:57.000Z</published>
    <updated>2018-07-02T07:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jquery-选择器的性能优化"><a href="#jquery-选择器的性能优化" class="headerlink" title="jquery 选择器的性能优化"></a>jquery 选择器的性能优化</h1><ul><li>尽量使用css中有的选择器  </li><li>避免过度约束</li><li>尽量以ID开头</li><li>让选择器的右边有更多的特征</li><li>避免使用全局选择器</li><li>缓存选择器结果</li></ul><h1 id="提取元素"><a href="#提取元素" class="headerlink" title="提取元素"></a>提取元素</h1><ul><li>$(..).get() 返回所有doem对象的集合，==增强型==</li><li>$(..).get(index) 返回第index的doem对象的集合，</li><li>$(..)[index] 返回第index的doem对象的集合，可以使用负数</li><li>$(..).eq(index)返回 第index的 jQuery对象可以使用负数<br><pre><code>.eq()与筛选 :eq() 差不多 但是我们建议使用.eq();</code></pre></li><li>$(..).toArrey 返回dom数组，</li></ul><hr><h1 id="jquery-对象的其他操作"><a href="#jquery-对象的其他操作" class="headerlink" title="jquery 对象的其他操作"></a>jquery 对象的其他操作</h1><ul><li>$(…).is()  返回的是一个布尔值！</li><li>end() 这个是返回的上一个对象， 对有破坏性的操作jq对象的返回<br></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;li&apos;).find(&quot;a&quot;).css(....)//这时返回的就不是$(&apos;li&apos;)对象了， 在此的链式的调用就会得不到你想要的结果，这时你就可以使用.end() 返货上一级的操作，</div></pre></td></tr></table></figure><p>-addBack()  包含自己的意思</p><h1 id="class增删切换"><a href="#class增删切换" class="headerlink" title="class增删切换"></a>class增删切换</h1><ul><li><p>.toggleClass() 里面可以写两个类名<br>ex： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$().toggleClass(&quot;red heid&quot;)</div></pre></td></tr></table></figure><p>如果存在red就切换heid 反之！</p></li><li>还可以使用函数的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(&quot;div&quot;).click(function() &#123; //index 表示下标 value 表示</div><div class="line">  $(this).toggleClass(</div><div class="line">    function(index, value) </div><div class="line">      return parseFloat(value) * 1.2;</div><div class="line">    &#125;</div><div class="line">  );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ul><h2 id="转换元素"><a href="#转换元素" class="headerlink" title="转换元素"></a>转换元素</h2><ul><li>.map()  就是jq的对象转换为另一个jq对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&apos;div&apos;).map(function(index,domElement)&#123;</div><div class="line">    return domEleement   //这里会返回div的所有的jq对象[this]</div><div class="line">    //如果返回的是undfind || null  就相当于这个元素被我跳过，不会返回这个原素</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="遍历jq-但是不需要改变"><a href="#遍历jq-但是不需要改变" class="headerlink" title="遍历jq 但是不需要改变"></a>遍历jq 但是不需要改变</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&apos;div&apos;).each(function(index,domElement)&#123;// 如果想终止循环就 给return true就跳过这个循环进入下一个 ；false的话就 以后的循环都不执行了 </div><div class="line">console.log(domElement)</div><div class="line">   </div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="特性attributes-VS-属性properties"><a href="#特性attributes-VS-属性properties" class="headerlink" title="特性attributes VS 属性properties"></a>特性attributes VS 属性properties</h2><ul><li>attributes：值为 string</li><li>properties ： 值为 string boolean number、 object<h4 id="操作原素的特性-可大小写"><a href="#操作原素的特性-可大小写" class="headerlink" title="操作原素的特性  //可大小写"></a>操作原素的特性  //可大小写</h4></li></ul><ol><li>获取特性的值：attr(name)</li><li>设置特性的值：attr(name,value) ;attr(object)  里面还可以的一个函数</li><li>removeAttr（） 删除特性 可以多个删除 加空格<h4 id="操作原素的属性-、、不可小写"><a href="#操作原素的属性-、、不可小写" class="headerlink" title="操作原素的属性 、、不可小写"></a>操作原素的属性 、、不可小写</h4></li><li>prop()</li><li>prop(name)   只能设置一个不可多个 用于input的选中</li><li>removeProp（name）<h3 id="再元素中存取数据"><a href="#再元素中存取数据" class="headerlink" title="再元素中存取数据"></a>再元素中存取数据</h3><ul><li>==获取==：data([name]) //这个可以获取HTML中的data-？？中的属性值，也可以获取 js中设置的值，但是优先级是js的高。</li></ul></li></ol><ul><li>==设置==：data(name，value) data(object)  设置的属性在HTML中是看不见的，可以设置多个用{…}；</li><li>==删除数据== removeData([name])  只能删除js只设置的；</li><li>==判断== jQuery.hasData(element)  这里只能是dom对象不是jq对象</li></ul><hr><p>###获取或设置元素尺寸</p><ul><li>width（value）</li><li><p>height（value）</p></li><li><p>innerHeight（vlue） //包含内边距，不包含边框和外边距 </p></li><li>innerWidth（value）//包含内边距，不包含边框和外边距<br>-传入true 就包含外边距<br>-outerWidth(valu) //包含内边距和边框  不一定包含外边距<br>-outerHeight(valu) //包含内边距和边框 不一定包含外边距</li></ul><h2 id="获取或设置位置的滚动"><a href="#获取或设置位置的滚动" class="headerlink" title="获取或设置位置的滚动"></a>获取或设置位置的滚动</h2><p>-offset()  返回 top let 的对象  是相对于document</p><ul><li>position()  放回离自己最近的相对定位时的父元素 否则就相对document</li><li>scrollTop(value) <h2 id="包裹元素"><a href="#包裹元素" class="headerlink" title="包裹元素"></a>包裹元素</h2></li><li>wrap(wrapper)  把谁的集合一次在 外面包裹了shiu</li><li>wrapAll(wrapper) 把谁的集合 外面包裹了谁</li><li>wrapInner(wrapper) 把这个元素的内容包裹在</li><li>UNwrap（） 取消包裹</li><li><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2></li></ul><p>-detach() 不像remeve()一样，他会保留数据和事件<br>-empty()  删除内容</p><h2 id="复制替换元素"><a href="#复制替换元素" class="headerlink" title="复制替换元素"></a>复制替换元素</h2><p> .clone([Even[,deepEven]])  第一个是否复制自己的事件 和数据，第二个是否深度复制</p><h2 id="jq-事件的出发-还可以传入参数"><a href="#jq-事件的出发-还可以传入参数" class="headerlink" title="jq 事件的出发  还可以传入参数"></a>jq 事件的出发  还可以传入参数</h2><ul><li>triggerHandler()</li><li>trigger();<br><br>==triggerHandler 相比 trigger==<ol><li>不会触发浏览器默认事件；</li><li>不会产生事件冒泡；</li><li>只触发jq对象集合中的第一个元素的事件处理函数；</li><li>返回的是事件处理函数的返回值，而不是jq对象。</li><li></li></ol></li></ul><h1 id="jq-插件机制"><a href="#jq-插件机制" class="headerlink" title="jq 插件机制"></a>jq 插件机制</h1><ul><li>扩展jq对象上的方法：jquery.fn.extend()</li><li>扩展jq 工具方法：jquery.extend()</li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">(function($) &#123;</div><div class="line">    var namespace = &apos;colorful&apos;;</div><div class="line"></div><div class="line">    var methods = &#123;</div><div class="line">        init: function(options) &#123;</div><div class="line">            options = $.extend(&#123;&#125;, $.fn[namespace].defaults, options);</div><div class="line"></div><div class="line">            if (options.font) &#123;</div><div class="line">                this.css(&apos;color&apos;, options.color);</div><div class="line">            &#125;</div><div class="line">            if (options.background) &#123;</div><div class="line">                this.css(&apos;background-color&apos;, options.color);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn[namespace] = function(method) &#123;</div><div class="line">        if (methods[method]) &#123;</div><div class="line">            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));</div><div class="line">        &#125; else if ($.type(method) === &apos;object&apos;) &#123;</div><div class="line">            return methods.init.apply(this, arguments);</div><div class="line">        &#125; else &#123;</div><div class="line">            $.error(&apos;Method&apos; + method + &apos; does not exist!&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $.fn[namespace].defaults = &#123;</div><div class="line">        color: &apos;red&apos;,</div><div class="line">        background: false,</div><div class="line">        font: true</div><div class="line">    &#125;;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. A asperiores assumenda atque cum cupiditate debitis dolore doloribus illum inventore, magnam pariatur placeat similique suscipit! A accusantium cum dolore numquam optio.&lt;/p&gt;</div><div class="line">    &lt;script src=&quot;../../vendor/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;jquery.colorful.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">    $(function() &#123;</div><div class="line">        $(&apos;p&apos;).colorful(&#123;</div><div class="line">            background: true,</div><div class="line">            font: false</div><div class="line">        &#125;).css(&apos;font-size&apos;, &apos;30px&apos;);</div><div class="line">    &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jquery-选择器的性能优化&quot;&gt;&lt;a href=&quot;#jquery-选择器的性能优化&quot; class=&quot;headerlink&quot; title=&quot;jquery 选择器的性能优化&quot;&gt;&lt;/a&gt;jquery 选择器的性能优化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;尽量使用css中有的选择
      
    
    </summary>
    
    
      <category term="js" scheme="http://www.cuijiajun.xin/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>cocopods卸载、安装、重装</title>
    <link href="http://www.cuijiajun.xin/cocopods%E5%8D%B8%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E9%87%8D%E8%A3%85.html"/>
    <id>http://www.cuijiajun.xin/cocopods卸载、安装、重装.html</id>
    <published>2018-04-17T03:29:34.000Z</published>
    <updated>2018-04-17T05:37:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>###如果升级cocopods不成功建议先卸载</p><h4 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h4><ul><li>卸载命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods</div></pre></td></tr></table></figure><ul><li>在查看之前本地安装cocopods相关东西</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem list --local | grep cocoapods</div></pre></td></tr></table></figure><a id="more"></a><h5 id="会显示："><a href="#会显示：" class="headerlink" title="会显示："></a>会显示：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cocoapods-core (1.5.0)</div><div class="line">cocoapods-deintegrate (1.0.2)</div><div class="line">cocoapods-downloader (1.2.0)</div><div class="line">cocoapods-plugins (1.0.0)</div><div class="line">cocoapods-search (1.0.0)</div><div class="line">cocoapods-stats (1.0.0)</div><div class="line">cocoapods-trunk (1.3.0)</div><div class="line">cocoapods-try (1.1.0)</div></pre></td></tr></table></figure><ul><li>然后用如下命令删除每一个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods-core</div></pre></td></tr></table></figure><ul><li>然后退出终端，重启Finder，cocopods安装完成</li></ul><hr><h3 id="cocopods安装"><a href="#cocopods安装" class="headerlink" title="cocopods安装"></a>cocopods安装</h3><ul><li>查看ruby源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div></pre></td></tr></table></figure><ul><li>移除掉原有的源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -r https://rubygems.org/</div></pre></td></tr></table></figure><ul><li>添加国内最新的源。ruby-china</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -a https://gems.ruby-china.org</div></pre></td></tr></table></figure><ul><li>是否添加成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div></pre></td></tr></table></figure><ul><li>安装cocoapods</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods（步骤有点慢，不要急）</div></pre></td></tr></table></figure><ul><li>安装完成后查看pod版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod --version</div></pre></td></tr></table></figure><ul><li>更新Podspec索引文件，创建本地索引库（这里要多等一会儿）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup（步骤有点慢，不要急）</div></pre></td></tr></table></figure><ul><li>进入项目目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd xxx/xxx</div></pre></td></tr></table></figure><ul><li>创建Podfile文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch Podfile (或者 pod init)</div></pre></td></tr></table></figure><ul><li>编辑Podfile文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi Podfile ()</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">target &apos;NEW_BSBDJ&apos; do</div><div class="line"></div><div class="line">  pod &apos;AFNetworking&apos;</div><div class="line"></div><div class="line">  pod &apos;MJExtension&apos;</div><div class="line"></div><div class="line">  pod &apos;MJRefresh&apos;</div><div class="line"></div><div class="line">  pod &apos;SDWebImage&apos;</div><div class="line"></div><div class="line">  pod &apos;SVProgressHUD&apos;</div><div class="line"></div><div class="line">end</div><div class="line">输入:wq保存退出或者shift+z+z保存退出vi编辑器</div></pre></td></tr></table></figure><ul><li>安装依赖库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install(后续添加框架可直接pod update)</div></pre></td></tr></table></figure><hr><h3 id="设置rvm以及ruby版本"><a href="#设置rvm以及ruby版本" class="headerlink" title="设置rvm以及ruby版本"></a>设置rvm以及ruby版本</h3><h4 id="rvm"><a href="#rvm" class="headerlink" title="rvm"></a>rvm</h4><ul><li>安装RVM (期间可能会问你sudo管理员密码，以及自动通过homebrew安装依赖包，等待一段时间后就可以成功安装好 RVM)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://get.rvm.io | bash -s stable</div></pre></td></tr></table></figure><ul><li>载入 RVM 环境（新开 Termal 就不用这么做了，会自动重新载入的）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.rvm/scripts/rvm</div></pre></td></tr></table></figure><ul><li>检查是否安装正确</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm -v</div></pre></td></tr></table></figure><h4 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h4><ul><li>用RVM安装Ruby环境,列出已知的ruby版本（同样继续等待漫长的下载，编译过程，完成以后，Ruby, Ruby Gems 就安装好了）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm list known</div></pre></td></tr></table></figure><ul><li>选择版本安装例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm install 2.4.1</div></pre></td></tr></table></figure><ul><li>查询已经安装的ruby</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm list</div></pre></td></tr></table></figure><ul><li>卸载一个已安装版本 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm remove 2.4.1</div></pre></td></tr></table></figure><ul><li>设置ruby版本rvm 装好以后，需要执行下面的命令将指定版本的 ruby 设置为系统默认版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm 2.4.1 --default</div></pre></td></tr></table></figure><ul><li>测试是否正确</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ruby -v</div><div class="line">gem -v</div></pre></td></tr></table></figure><p>愉快的使用cocopods吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###如果升级cocopods不成功建议先卸载&lt;/p&gt;
&lt;h4 id=&quot;卸载步骤&quot;&gt;&lt;a href=&quot;#卸载步骤&quot; class=&quot;headerlink&quot; title=&quot;卸载步骤&quot;&gt;&lt;/a&gt;卸载步骤&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;卸载命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo gem uninstall cocoapods&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在查看之前本地安装cocopods相关东西&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ gem list --local | grep cocoapods&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="cocopods" scheme="http://www.cuijiajun.xin/tags/cocopods/"/>
    
  </entry>
  
  <entry>
    <title>error: RPC failed; curl 18 transfer closed with outstanding read data remaining</title>
    <link href="http://www.cuijiajun.xin/error-RPC-failed-curl-18-transfer-closed-with-outstanding-read-data-remaining.html"/>
    <id>http://www.cuijiajun.xin/error-RPC-failed-curl-18-transfer-closed-with-outstanding-read-data-remaining.html</id>
    <published>2018-04-03T06:41:04.000Z</published>
    <updated>2018-04-03T07:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误："><a href="#最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：" class="headerlink" title="最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误："></a>最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</div><div class="line">fatal: The remote end hung up unexpectedly</div><div class="line">fatal: early EOF</div><div class="line">fatal: index-pack failed</div></pre></td></tr></table></figure><a id="more"></a><h4 id="原因说明"><a href="#原因说明" class="headerlink" title="原因说明:"></a>原因说明:</h4><h4 id="我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。"><a href="#我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。" class="headerlink" title="我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。"></a>我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以了。</h4><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global http.postBuffer 524288000</div></pre></td></tr></table></figure><h4 id="524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。"><a href="#524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。" class="headerlink" title="524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。"></a>524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。</h4><hr><h4 id="也可以用如下命令查看是否配置成功："><a href="#也可以用如下命令查看是否配置成功：" class="headerlink" title="也可以用如下命令查看是否配置成功："></a>也可以用如下命令查看是否配置成功：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&quot;&gt;&lt;a href=&quot;#最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&quot; class=&quot;headerlink&quot; title=&quot;最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&quot;&gt;&lt;/a&gt;最近项目要进入到新一轮的spring，需要从git上克隆一份最新的代码，在使用终端clone的时候，屡次出现如下错误：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;error: RPC failed; curl 18 transfer closed with outstanding read data remaining&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fatal: The remote end hung up unexpectedly&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fatal: early EOF&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fatal: index-pack failed&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.cuijiajun.xin/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>tableView setion  cell加边框圆角</title>
    <link href="http://www.cuijiajun.xin/tableView-setion-cell%E5%8A%A0%E8%BE%B9%E6%A1%86%E5%9C%86%E8%A7%92.html"/>
    <id>http://www.cuijiajun.xin/tableView-setion-cell加边框圆角.html</id>
    <published>2017-10-12T03:23:14.000Z</published>
    <updated>2017-10-12T03:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>###最近项目UI需求tableViewCell 带圆角边框，自己写了下像平常那样去设置圆角边框行不通网上差了一下自己又改进一下，废话不多说先看图在撸代码。<br>图片效果如下：<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2042941-f77ffeb618445f20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="51499150024_.pic副本.jpg"></p><hr><p>###实现上面效果暂时想到两种办法：</p><p>####一、cell重绘给section，绘制边框。可以构建基类或者写在category里面，方便使用代码如下：<br>可直接复制代码到项目中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">// 这里要判断分组列表中的第一行，每组section的第一行，每组section的中间行</div><div class="line"></div><div class="line">// CGPathAddRoundedRect(pathRef, nil, bounds, cornerRadius, cornerRadius);</div><div class="line">if (indexPath.section == 2) &#123;</div><div class="line">// 圆角弧度半径</div><div class="line">CGFloat cornerRadius = 3.f;</div><div class="line">// 设置cell的背景色为透明，如果不设置这个的话，则原来的背景色不会被覆盖</div><div class="line">cell.backgroundColor = UIColor.clearColor;</div><div class="line"></div><div class="line">// 创建一个shapeLayer</div><div class="line">CAShapeLayer *layer = [[CAShapeLayer alloc] init];</div><div class="line">CAShapeLayer *backgroundLayer = [[CAShapeLayer alloc] init]; //显示选中</div><div class="line">// 创建一个可变的图像Path句柄，该路径用于保存绘图信息</div><div class="line">CGMutablePathRef pathRef = CGPathCreateMutable();</div><div class="line">// 获取cell的size</div><div class="line">// 第一个参数,是整个 cell 的 bounds, 第二个参数是距左右两端的距离,第三个参数是距上下两端的距离</div><div class="line">CGRect bounds = CGRectInset(cell.bounds, 10, 0);</div><div class="line"></div><div class="line">// CGRectGetMinY：返回对象顶点坐标</div><div class="line">// CGRectGetMaxY：返回对象底点坐标</div><div class="line">// CGRectGetMinX：返回对象左边缘坐标</div><div class="line">// CGRectGetMaxX：返回对象右边缘坐标</div><div class="line">// CGRectGetMidX: 返回对象中心点的X坐标</div><div class="line">// CGRectGetMidY: 返回对象中心点的Y坐标</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section]-1) &#123;</div><div class="line">CGPathAddRoundedRect(pathRef, nil, bounds, cornerRadius, cornerRadius);</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">// 初始起点为cell的左下角坐标</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds));</div><div class="line">// 起始坐标为左下角，设为p，（CGRectGetMinX(bounds), CGRectGetMinY(bounds)）为左上角的点，设为p1(x1,y1)，(CGRectGetMidX(bounds), CGRectGetMinY(bounds))为顶部中点的点，设为p2(x2,y2)。然后连接p1和p2为一条直线l1，连接初始点p到p1成一条直线l，则在两条直线相交处绘制弧度为r的圆角。</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds), CGRectGetMidX(bounds), CGRectGetMinY(bounds), cornerRadius);</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds), CGRectGetMaxX(bounds), CGRectGetMidY(bounds), cornerRadius);</div><div class="line"></div><div class="line">// 终点坐标为右下角坐标点，把绘图信息都放到路径中去,根据这些路径就构成了一块区域了</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds));</div><div class="line">//            CGPathCloseSubpath(pathRef);</div><div class="line"></div><div class="line">&#125; else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section]-1) &#123;</div><div class="line">//</div><div class="line">// 初始起点为cell的左上角坐标</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds), CGRectGetMidX(bounds), CGRectGetMaxY(bounds), cornerRadius);</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds), CGRectGetMaxX(bounds), CGRectGetMidY(bounds), cornerRadius);</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds));</div><div class="line">//            CGPathCloseSubpath(pathRef);</div><div class="line"></div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line">// 添加cell的rectangle信息到path中（不包括圆角）</div><div class="line">//            CGPathAddRect(pathRef, nil, bounds);</div><div class="line"></div><div class="line">//假如只要边框</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds));</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds));</div><div class="line">&#125;</div><div class="line">// 把已经绘制好的可变图像路径赋值给图层，然后图层根据这图像path进行图像渲染render</div><div class="line">layer.path = pathRef;</div><div class="line">backgroundLayer.path = pathRef;</div><div class="line"></div><div class="line">// 注意：但凡通过Quartz2D中带有creat/copy/retain方法创建出来的值都必须要释放</div><div class="line">CFRelease(pathRef);</div><div class="line">// 按照shape layer的path填充颜色，类似于渲染render</div><div class="line">layer.lineWidth = 0.5f;//线的宽度</div><div class="line">layer.strokeColor = [UIColor colorWithHex:@&quot;#cccccc&quot;].CGColor;//线的颜色</div><div class="line">layer.fillColor = [UIColor whiteColor].CGColor;//cellcell背景色</div><div class="line">// view大小与cell一致</div><div class="line">UIView *roundView = [[UIView alloc] initWithFrame:bounds];</div><div class="line">// 添加自定义圆角后的图层到roundView中</div><div class="line">[roundView.layer insertSublayer:layer atIndex:0];</div><div class="line">roundView.backgroundColor = UIColor.clearColor;</div><div class="line">// cell的背景view</div><div class="line">cell.backgroundView = roundView;</div><div class="line">cell.backgroundColor = [UIColor whiteColor];</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p></p><p></p><p>####二、自定义一个BaseCell作为基类，由它承载边框的实现；然后再继承于BaseBorderCell自定义cell进行内容展示；</p><p><hr><ul><li>BaseBorderCell.h文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//此cell只简单负责border的配置，cell中的内容可以继承于此类再进行封装</div><div class="line"></div><div class="line">typedef NS_ENUM(NSUInteger, BaseCellBorderStyle) &#123;</div><div class="line">BaseCellBorderStyleNoRound = 0,</div><div class="line">BaseCellBorderStyleTopRound,</div><div class="line">BaseCellBorderStyleBottomRound,</div><div class="line">BaseCellBorderStyleAllRound,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface BaseBorderCell : UITableViewCell</div><div class="line"></div><div class="line">@property (nonatomic, assign) BaseCellBorderStyle borderStyle;//边框类型</div><div class="line">@property (nonatomic, strong) UIColor *contentBorderColor;//边框颜色</div><div class="line">@property (nonatomic, strong) UIColor *contentBackgroundColor;//边框内部内容颜色</div><div class="line">@property (nonatomic, assign) CGFloat contentBorderWidth;//边框的宽度，这个宽度的一半会延伸到外部，如果对宽度比较敏感的要注意下</div><div class="line">@property (nonatomic, assign) CGFloat contentMargin;//左右距离父视图的边距</div><div class="line">@property (nonatomic, assign) CGSize contentCornerRadius;//边框的圆角</div><div class="line"></div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath;</div><div class="line">//如果不想用上面的方法初始化cell，就用下面的方法设置borderStyle</div><div class="line">- (void)setBorderStyleWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath;</div><div class="line">@end</div></pre></td></tr></table></figure><ul><li>BaseBorderCell.m文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line">#import &quot;BaseBorderCell.h&quot;</div><div class="line"></div><div class="line">#define Width self.contentView.frame.size.width</div><div class="line">#define Height self.contentView.frame.size.height</div><div class="line"></div><div class="line">@implementation BaseBorderCell</div><div class="line">//</div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">BaseBorderCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;cell&quot;];</div><div class="line">if (!cell) &#123;</div><div class="line">cell = [[BaseBorderCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@&quot;cell&quot;];</div><div class="line">&#125;</div><div class="line">//一定要这里设置style，而不能在上面的判断里面，因为cell重用的时候，只要有不同的地方都应该重新设置，否则拿到cell的style就是上一个的样式而自己却没有进行修改</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleAllRound;</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleTopRound;</div><div class="line">&#125;else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleBottomRound;</div><div class="line">&#125;else &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleNoRound;</div><div class="line">&#125;</div><div class="line">return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier</div><div class="line">&#123;</div><div class="line">self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];</div><div class="line">if (self) &#123;</div><div class="line">//配置默认值</div><div class="line">self.contentBorderColor = [UIColor lightGrayColor];</div><div class="line">self.contentBackgroundColor = [UIColor whiteColor];</div><div class="line">self.contentBorderWidth = 2.0;</div><div class="line">self.contentMargin = 10.0;</div><div class="line">self.contentCornerRadius = CGSizeMake(5, 5);</div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setBorderStyleWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleAllRound;</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleTopRound;</div><div class="line">&#125;else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleBottomRound;</div><div class="line">&#125;else &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleNoRound;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)layoutSubviews</div><div class="line">&#123;</div><div class="line">[super layoutSubviews];</div><div class="line">//在这里设置才能获取到真正显示时候的宽度，而不是原始的</div><div class="line">[self setupBorder];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setupBorder</div><div class="line">&#123;</div><div class="line">self.selectionStyle = UITableViewCellSelectionStyleNone;</div><div class="line">self.backgroundColor = [UIColor clearColor];</div><div class="line"></div><div class="line">CAShapeLayer *layer = [CAShapeLayer layer];</div><div class="line">layer.lineWidth = self.contentBorderWidth;</div><div class="line">layer.strokeColor = self.contentBorderColor.CGColor;</div><div class="line">layer.fillColor =  self.contentBackgroundColor.CGColor;</div><div class="line"></div><div class="line">UIView *view = [[UIView alloc] initWithFrame:self.contentView.bounds];</div><div class="line">[view.layer insertSublayer:layer atIndex:0];</div><div class="line">view.backgroundColor = [UIColor clearColor];</div><div class="line">//用自定义的view代替cell的backgroundView</div><div class="line">self.backgroundView = view;</div><div class="line"></div><div class="line">CGRect rect = CGRectMake(self.contentMargin, 0, Width - 2*self.contentMargin, Height);</div><div class="line">switch (self.borderStyle) &#123;</div><div class="line">case BaseCellBorderStyleNoRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRect:rect];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleTopRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleBottomRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerBottomLeft | UIRectCornerBottomRight cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleAllRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerAllCorners cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">default:</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p><p>###个人喜欢第一种简单高效副作用小</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###最近项目UI需求tableViewCell 带圆角边框，自己写了下像平常那样去设置圆角边框行不通网上差了一下自己又改进一下，废话不多说先看图在撸代码。&lt;br&gt;图片效果如下：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自动查找项目中不用的图片资源 </title>
    <link href="http://www.cuijiajun.xin/iOS%E8%87%AA%E5%8A%A8%E6%9F%A5%E6%89%BE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%8D%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90.html"/>
    <id>http://www.cuijiajun.xin/iOS自动查找项目中不用的图片资源.html</id>
    <published>2017-10-12T03:15:01.000Z</published>
    <updated>2018-04-03T06:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>####项目上线资源包比较大，要做瘦身，首先想到是删除项目中不用的图片资源，去github上搜索了比较好用的项目资源，比较好用分享给大家，简单好用<br><a id="more"></a></p><p>####1.去github上下载<a href="https://github.com/Cocowyr/LSUnusedResources" target="_blank" rel="external">LSUnusedResources</a></p><p>####2.运行LSUnusedResources项目，运行结果如下</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-024524d56cbe274f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####3.点击dock中的项目图标</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-68acdf6c1bfb85b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####4.上传项目路径</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-689f529d3fb55742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####5.点击search</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-0e9ad76c59a3e87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####6.delete掉没有用的资源图片</p><p>###注意：删除的时候要谨慎！别什么图都删了，看看对项目有没有作用。这个插件有时也会有一定的误差。但总体来说非常好用。</p><p>##</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####项目上线资源包比较大，要做瘦身，首先想到是删除项目中不用的图片资源，去github上搜索了比较好用的项目资源，比较好用分享给大家，简单好用&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.cuijiajun.xin/categories/iOS/"/>
    
    
      <category term="iOS优化" scheme="http://www.cuijiajun.xin/tags/iOS%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.cuijiajun.xin/hello-world.html"/>
    <id>http://www.cuijiajun.xin/hello-world.html</id>
    <published>2017-10-11T06:55:02.000Z</published>
    <updated>2017-10-11T06:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js常用的代码片段</title>
    <link href="http://www.cuijiajun.xin/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.html"/>
    <id>http://www.cuijiajun.xin/常用代码片段.html</id>
    <published>2017-06-28T09:08:57.000Z</published>
    <updated>2018-07-02T07:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义循环函数"><a href="#自定义循环函数" class="headerlink" title="自定义循环函数"></a>自定义循环函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const  ff = function () &#123;</div><div class="line">    var arry = [];</div><div class="line">    (function iterator(i) &#123;</div><div class="line">        if(i==4)&#123;</div><div class="line">            console.log(&quot;结束了&quot;);</div><div class="line">            console.log(arry);</div><div class="line">            return;</div><div class="line">        &#125;;</div><div class="line">        arry.push(i);</div><div class="line">         iterator(i+1);</div><div class="line">    &#125;)(0)</div><div class="line"></div><div class="line">&#125;;</div><div class="line">ff();</div></pre></td></tr></table></figure><hr><h1 id="title-样式的改变"><a href="#title-样式的改变" class="headerlink" title="title 样式的改变"></a>title 样式的改变</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">    var oldTitle = null;</div><div class="line">$(document).bind(&apos;mouseover mouseout mousemove&apos;,function(event)&#123;           </div><div class="line">    var left = event.pageX , top = event.pageY;</div><div class="line">    var ele = event.target;</div><div class="line">    var title = ele.title;</div><div class="line"></div><div class="line">    var type = event.originalEvent.type;</div><div class="line">    if(type == &apos;mouseover&apos;)&#123;</div><div class="line">        oldTitle = title;</div><div class="line">        ele.title = &apos;&apos;;</div><div class="line">        //if(title &amp;&amp; title.length &gt; 0)&#123;                </div><div class="line">        if(title != null)&#123;              </div><div class="line">            var showEle = $(&apos;&lt;div&gt;&lt;/div&gt;&apos;,&#123;text:title,class:&apos;showTitleBox&apos;&#125;).css(&#123;</div><div class="line">                position:&apos;absolute&apos;,</div><div class="line">                top:top+10,</div><div class="line">                left:left,</div><div class="line">                border:&apos;1px solid #CCC&apos;,</div><div class="line">                borderRadius:&apos;5px&apos;,</div><div class="line">                background:&quot;infobackground&quot;,</div><div class="line">                fontFamily:&apos;SimHei&apos;</div><div class="line">            &#125;)</div><div class="line">            showEle.appendTo(&apos;body&apos;);               </div><div class="line">        &#125;</div><div class="line">    &#125;else if(type == &apos;mouseout&apos;)&#123;</div><div class="line">        ele.title = oldTitle;</div><div class="line">        $(&apos;.showTitleBox&apos;).remove();</div><div class="line">    &#125;else if(type == &apos;mousemove&apos;)&#123;</div><div class="line">        $(&apos;.showTitleBox&apos;).css(&#123;</div><div class="line">            top:top+10,</div><div class="line">            left:left</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><hr><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function add0(m) &#123;</div><div class="line">    return m &lt; 10 ? &apos;0&apos; + m : m</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//时间戳</div><div class="line">function getLocalTime(nS) &#123;</div><div class="line">    // return new Date(parseInt(nS) * 1000).toLocaleString().replace(/:\d&#123;1,2&#125;$/,&apos; &apos;);</div><div class="line">    // return new Date(parseInt(nS) * 1000).toLocaleString().replace(/年|月/g, &quot;-&quot;).replace(/日/g, &quot; &quot;);</div><div class="line"></div><div class="line">    var ti = new Date(parseInt(nS) * 1000);</div><div class="line">    var y = ti.getFullYear();</div><div class="line">    var m = ti.getMonth() + 1;</div><div class="line">    var d = ti.getDate();</div><div class="line">    var h = ti.getHours();</div><div class="line">    var mm = ti.getMinutes();</div><div class="line">    var s = ti.getSeconds();</div><div class="line">    return y + &apos;-&apos; + add0(m) + &apos;-&apos; + add0(d) //+ &apos; &apos; + add0(h) + &apos;:&apos; + add0(mm);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自定义循环函数&quot;&gt;&lt;a href=&quot;#自定义循环函数&quot; class=&quot;headerlink&quot; title=&quot;自定义循环函数&quot;&gt;&lt;/a&gt;自定义循环函数&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="js" scheme="http://www.cuijiajun.xin/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>webpack常用知识总结</title>
    <link href="http://www.cuijiajun.xin/webpack1.html"/>
    <id>http://www.cuijiajun.xin/webpack1.html</id>
    <published>2017-05-28T09:08:57.000Z</published>
    <updated>2018-07-02T06:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-css-loader加载器"><a href="#webpack-css-loader加载器" class="headerlink" title="webpack css loader加载器"></a>webpack css loader加载器</h2><ol><li>什么是加载器 npm安装 正则表达式 loader打包</li><li>loader解析 node npm</li><li>安装loader npm install XXX-loader –save–dev</li></ol><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> module.exports=&#123;</div><div class="line">    //入口文件的配置项</div><div class="line">    entry:&#123;&#125;,</div><div class="line">    //出口文件的配置项</div><div class="line">    output:&#123;&#125;,</div><div class="line">    //模块：例如解读CSS,图片如何转换，压缩</div><div class="line">    module:&#123;&#125;,</div><div class="line">    //插件，用于生产模版和各项功能</div><div class="line">    plugins:[],</div><div class="line">    //配置webpack开发服务功能</div><div class="line">    devServer:&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>entry：配置入口文件的地址，可以是单一入口，也可以是多入口。</li><li>output：配置出口文件的地址，在webpack2.X版本后，支持多出口配置。</li><li>module：配置模块，主要是解析CSS和图片转换压缩等功能。</li><li>plugins：配置插件，根据你的需要配置不同功能的插件。</li><li>devServer：配置开发服务功能，<ul><li><a href="http://jspang.com/2017/09/16/webpack3-2/" target="_blank" rel="external">http://jspang.com/2017/09/16/webpack3-2/</a><br>-<h4 id="devserver"><a href="#devserver" class="headerlink" title="devserver{}"></a>devserver{}</h4></li></ul></li></ul><p>设置webpack-dev-server<br>要执行webpack-dev-server是要先用npm install webpack-dev-server –save-dev 来进行下载的。下载好后，需要配置一下devServer。最简单的devServer配置项只有四个。先看一下代码，然后我再作解释。</p><h5 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="/webpack.config.js"></a>/webpack.config.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">devServer:&#123;</div><div class="line">        //设置基本目录结构</div><div class="line">        contentBase:path.resolve(__dirname,&apos;dist&apos;),</div><div class="line">        //服务器的IP地址，可以使用IP也可以使用localhost</div><div class="line">        host:&apos;localhost&apos;,</div><div class="line">        //服务端压缩是否开启</div><div class="line">        compress:true,</div><div class="line">        //配置服务端口号</div><div class="line">        port:1717</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>contentBase:配置服务器基本运行路径，用于找到程序打包地址。</li><li>host：服务运行地址，建议使用本机IP，这里为了讲解方便，所以用localhost。</li><li>compress：服务器端压缩选型，一般设置为开启，如果你对服务器压缩感兴趣，可以自行学习。</li><li>port：服务运行端口，建议不使用80，很容易被占用，这里使用了1717.</li><li></li></ul><hr><p>配置好后，你可以试着在终端中输入webpack-dev-server,如果可以执行成功，但是往往提示下面的错误（或者是无法找到内部或外部命令）。</p><p>出现下面的错误不用慌张，我们只要在package.json里配置一下scripts选项就可以执行了。</p><h5 id="package-json"><a href="#package-json" class="headerlink" title="/package.json"></a>/package.json</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;server&quot;:&quot;webpack-dev-server&quot;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure><p> 在浏览器中自动打开<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;server&quot;: &quot;webpack-dev-server --open&quot;,</div><div class="line">  &quot;build&quot;: &quot;webpack&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><p> 配置好保存后，在终端里输入 npm  run  server  打开服务器。然后在浏览器地址栏输入<a href="http://localhost:1717就可以看到结果了。" target="_blank" rel="external">http://localhost:1717就可以看到结果了。</a></p><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><h5 id="loader的三种写法："><a href="#loader的三种写法：" class="headerlink" title="loader的三种写法："></a>loader的三种写法：</h5><p>== css打包==</p><ul><li>第一种写法：直接用use。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module:&#123;</div><div class="line">      rules:[</div><div class="line">          &#123;</div><div class="line">              test:/\.css$/,</div><div class="line">              use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</div><div class="line">          &#125;</div><div class="line">      ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></li></ul><ul><li><p>第二种写法：把use换成loader。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module:&#123;</div><div class="line">      rules:[</div><div class="line">          &#123;</div><div class="line">              test:/\.css$/,</div><div class="line">              loader:[&apos;style-loader&apos;,&apos;css-loader&apos;]</div><div class="line">          &#125;</div><div class="line">      ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></li><li><p>第三种写法：用use+loader的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">module:&#123;</div><div class="line">     rules:[</div><div class="line">         &#123;</div><div class="line">             test:/\.css$/,</div><div class="line">             use: [</div><div class="line">                 &#123;</div><div class="line">                     loader: &quot;style-loader&quot;</div><div class="line">                 &#125;, &#123;</div><div class="line">                     loader: &quot;css-loader&quot;</div><div class="line">                 &#125;</div><div class="line">             ]</div><div class="line">         &#125;</div><div class="line">     ]</div><div class="line"> &#125;,</div></pre></td></tr></table></figure></li></ul><hr><h4 id="压缩JS代码："><a href="#压缩JS代码：" class="headerlink" title="压缩JS代码："></a>压缩JS代码：</h4><p>现在你写的JS代码，在上线之前，都是需要进行压缩的，在没有webpack和gulp这些工具前，你可能需要找一个压缩软件或者在线进行压缩，在Webpack中可以很轻松的实现JS代码的压缩，它是通过插件的方式实现的，这里我们就先来引入一个uglifyjs-webpack-plugin(JS压缩插件，简称uglify)。</p><p>==注意==：虽然uglifyjs是插件，但是webpack版本里默认已经集成，不需要再次安装</p><ol><li><p>我们需要在webpack.config.js中引入uglifyjs-webpack-glugin插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const uglify = require(&apos;uglifyjs-webpack-plugin&apos;);</div></pre></td></tr></table></figure></li><li><p>引入后在plugins配置里new一个 uglify对象就可以了，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins:[</div><div class="line">      new uglify()</div><div class="line">  ],</div></pre></td></tr></table></figure></li></ol><hr><h4 id="打包HTML文件"><a href="#打包HTML文件" class="headerlink" title="打包HTML文件"></a>打包HTML文件</h4><p>我们先把dist中的html文件剪切到src目录中，并去掉我们的JS引入代码（webpack会自动为我们引入JS），因为这才是我们真实工作的目录文件结构。</p><p>然后我们配置webpack.config.js文件，先引入我们的html-webpack-plugin插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const htmlPlugin= require(&apos;html-webpack-plugin&apos;);</div></pre></td></tr></table></figure></p><p>引入后使用npm进行安装包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install --save-dev html-webpack-plugin</div></pre></td></tr></table></figure></p><p>最后在webpack.config.js里的plugins里进行插件配置，配置代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new htmlPlugin(&#123;</div><div class="line">            minify:&#123;</div><div class="line">                removeAttributeQuotes:true</div><div class="line">            &#125;,</div><div class="line">            hash:true,</div><div class="line">            template:&apos;./src/index.html&apos;</div><div class="line">           </div><div class="line">        &#125;)</div></pre></td></tr></table></figure></p><ul><li>minify：是对html文件进行压缩，removeAttrubuteQuotes是却掉属性的双引号。</li><li>hash：为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS。</li><li>template：是要打包的html模版路径和文件名称。</li></ul><p>上边的都配置完成后，我们就可以在终端中使用webpack，进行打包。你会看到index.html文件已经被打包到我们的dist目录下了，并且自动为我们引入了路口的JS文件。</p><hr><h4 id="图片迈坑：CSS中的图片处理"><a href="#图片迈坑：CSS中的图片处理" class="headerlink" title="图片迈坑：CSS中的图片处理"></a>图片迈坑：CSS中的图片处理</h4><p>编写css文件，把你用的图片作为背景显示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#tupian&#123;</div><div class="line">   background-image: url(../images/manhua.png);</div><div class="line">   width:466px;</div><div class="line">   height:453px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这时候打包就回报错</p><h5 id="file-loader、url-loader"><a href="#file-loader、url-loader" class="headerlink" title="file-loader、url-loader"></a>file-loader、url-loader</h5><p>上面的错误是由于缺少loader的解析，对loader其实我们并不陌生，因为前边已经学习了CSS打包的loader。我们先安装两个解析图片用的loader。</p><p>安装file-loader和url-loader<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev file-loader url-loader</div></pre></td></tr></table></figure></p><p>==file-loader==：解决引用路径的问题，拿background样式用url引入背景图来说，我们都知道，webpack最终会将各个模块打包成一个文件，因此我们样式中的url路径是相对入口html页面的，而不是相对于原始css文件所在的路径的。这就会导致图片引入失败。这个问题是用file-loader解决的，file-loader可以解析项目中的url引入（不仅限于css），根据我们的配置，将图片拷贝到相应的路径，再根据我们的配置，修改打包后文件引用路径，使之指向正确的文件。</p><p>==url-loader==：如果图片较多，会发很多http请求，会降低页面性能。这个问题可以通过url-loader解决。url-loader会将引入的图片编码，生成dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此url-loader提供了一个limit参数，小于limit字节的文件会被转为DataURl，大于limit的还会使用file-loader进行copy。</p><p>==我们安装好后，就可以使用这个loader了，记得在loader使用时不需要用require引入，在plugins才需要使用require引入。==</p><h5 id="webpack-config-js文件"><a href="#webpack-config-js文件" class="headerlink" title="webpack.config.js文件"></a>webpack.config.js文件</h5><p> //模块：例如解读CSS,图片如何转换，压缩<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module:&#123;</div><div class="line">    rules: [</div><div class="line">        &#123;</div><div class="line">          test: /\.css$/,</div><div class="line">          use: [ &apos;style-loader&apos;, &apos;css-loader&apos; ]</div><div class="line">        &#125;,&#123;</div><div class="line">           test:/\.(png|jpg|gif)/ ,</div><div class="line">           use:[&#123;</div><div class="line">               loader:&apos;url-loader&apos;,</div><div class="line">               options:&#123;</div><div class="line">                   limit:500000</div><div class="line">               &#125;</div><div class="line">           &#125;]</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><ul><li>test:/.(png|jpg|gif)/是匹配图片文件后缀名称。</li><li>use：是指定使用的loader和loader的配置参数。</li><li>limit：是把小于500000B的文件打成Base64的格式，写入JS。</li></ul><h4 id="图片迈坑：CSS分离与图片路径处理"><a href="#图片迈坑：CSS分离与图片路径处理" class="headerlink" title="图片迈坑：CSS分离与图片路径处理"></a>图片迈坑：CSS分离与图片路径处理</h4><p>==CSS分离==:extract-text-webpack-plugin</p><p>有些简单的交互页面中，你的JavasScript页面代码会非常少，而大部分代码都在CSS中，这时候项目组长会要求把CSS单独提取出来，方便以后更改。遇到这个需求你不要惊慌，已经有大神为我们准备好了对象的插件（plugin）。</p><p><img src="http://7xjyw1.com1.z0.glb.clouddn.com/extracttextwebpackplugin.png" alt="image"><br>这个插件就可以完美的解决我们提取CSS的需求，但是webpack官方其实并不建议这样作，他们认为CSS就应该打包到JavasScript当中以减少http的请求数。但现实中的需求往往不是我们前端能控制的，有些需求是我们不能控制的，分离CSS就是这样一个既合理由不合理的需求。</p><ol><li><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev extract-text-webpack-plugin</div></pre></td></tr></table></figure></li><li><p>引入：安装完成后，需要先用require引入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const extractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</div></pre></td></tr></table></figure></li><li><p>设置Plugins：引入成功后需要在plugins属性中进行配置。这里只要new一下这个对象就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new extractTextPlugin(&quot;/css/index.css&quot;)</div></pre></td></tr></table></figure></li><li><p>这里的/css/index.css是分离后的路径位置。这部配置完成后，包装代码：还要修改原来我们的style-loader和css-loader。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module:&#123;</div><div class="line">        rules: [</div><div class="line">            &#123;</div><div class="line">              test: /\.css$/,</div><div class="line">              use: extractTextPlugin.extract(&#123;</div><div class="line">                fallback: &quot;style-loader&quot;,</div><div class="line">                use: &quot;css-loader&quot;</div><div class="line">              &#125;)</div><div class="line">            &#125;,&#123;</div><div class="line">               test:/\.(png|jpg|gif)/ ,</div><div class="line">               use:[&#123;</div><div class="line">                   loader:&apos;url-loader&apos;,</div><div class="line">                   options:&#123;</div><div class="line">                       limit:500000</div><div class="line">                   &#125;</div><div class="line">               &#125;]</div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></li></ol><h5 id="图片路径问题："><a href="#图片路径问题：" class="headerlink" title="图片路径问题："></a>图片路径问题：</h5><p>利用extract-text-webpack-plugin插件很轻松的就把CSS文件分离了出来，但是CSS路径并不正确，很多小伙伴就在这里搞个几天还是没有头绪，网上也给出了很多的解决方案，我觉的最好的解决方案是使用publicPath解决，我也一直在用。</p><p>==publicPath==：是在webpack.config.js文件的output选项中，主要作用就是处理静态文件路径的。</p><p>在处理前，我们在webpack.config.js 上方声明一个对象，叫website。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var website =&#123;</div><div class="line">    publicPath:&quot;http://192.168.1.108:1717/&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意，这里的IP和端口，是你本机的ip或者是你devServer配置的IP和端口。</p><p>然后在output选项中引用这个对象的publicPath属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//出口文件的配置项</div><div class="line">   output:&#123;</div><div class="line">       //输出的路径，用了Node语法</div><div class="line">       path:path.resolve(__dirname,&apos;dist&apos;),</div><div class="line">       //输出的文件名称</div><div class="line">       filename:&apos;[name].js&apos;,</div><div class="line">       publicPath:website.publicPath</div><div class="line">   &#125;,</div></pre></td></tr></table></figure></p><p>配置完成后，你再使用webpack命令进行打包，你会发现原来的相对路径改为了绝对路径，这样来讲速度更快。</p><h5 id="html-withimg-loader"><a href="#html-withimg-loader" class="headerlink" title="html-withimg-loader"></a>html-withimg-loader</h5><p>html-withimg-loader就是我们今天的重点了，这个插件并不是很火，也是我个人喜欢的一个小loader。解决的问题就是在hmtl文件中引入 img标签的问题。</p><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install html-withimg-loader --save</div></pre></td></tr></table></figure><h5 id="配置loader"><a href="#配置loader" class="headerlink" title="配置loader"></a>配置loader</h5><p>webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.(htm|html)$/i,</div><div class="line">     use:[ &apos;html-withimg-loader&apos;] </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后在终端中可以进行打包了。你会发现images被很好的打包了。并且路径也完全正确。</p><h4 id="CSS进阶：Less文件的打包和分离"><a href="#CSS进阶：Less文件的打包和分离" class="headerlink" title="CSS进阶：Less文件的打包和分离"></a>CSS进阶：Less文件的打包和分离</h4><h5 id="打包Less文件"><a href="#打包Less文件" class="headerlink" title="打包Less文件"></a>打包Less文件</h5><p>安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev less</div></pre></td></tr></table></figure></p><p>还需要安装Less-loader用来打包使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev less-loader</div></pre></td></tr></table></figure></p><p>写loader配置：<br>安装好后，需要在webpack.config.js里编写loader配置，当然要想正确解析成CSS，还是需要style-loader和css-loader的帮助，</p><p>webpack.config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.less$/,</div><div class="line">    use: [&#123;</div><div class="line">           loader: &quot;style-loader&quot; // creates style nodes from JS strings</div><div class="line">        &#125;, &#123;</div><div class="line">            loader: &quot;css-loader&quot; // translates CSS into CommonJS</div><div class="line">        , &#123;</div><div class="line">            loader: &quot;less-loader&quot; // compiles Less to CSS</div><div class="line">        &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编写一个less文件</p><p>black.less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@base :#000;</div><div class="line">#gogo&#123;</div><div class="line">    width:300px;</div><div class="line">    height:300px;</div><div class="line">    background-color:@base;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>引入到我们entery.js文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import less from &apos;./css/black.less&apos;;</div></pre></td></tr></table></figure><p>这样我们就可以把less文件进行打包了。我们可以使用webpack命令打包试一试</p><p>把Lees文件分离。</p><p>我们之前讲了extract-text-webpack-plugin这个插件，想把Less文件分离出来的方法跟这个几乎一样，这里我们就只讲less的loader配置方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">            test: /\.less$/,</div><div class="line">            use: extractTextPlugin.extract(&#123;</div><div class="line">                use: [&#123;</div><div class="line">                    loader: &quot;css-loader&quot;</div><div class="line">                &#125;, &#123;</div><div class="line">                    loader: &quot;less-loader&quot;</div><div class="line">                &#125;],</div><div class="line">                // use style-loader in development</div><div class="line">                fallback: &quot;style-loader&quot;</div><div class="line">            &#125;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>配置好后，你会发现less被分离到了index.css文件里。</p><h4 id="CSS进阶：SASS文件的打包和分离"><a href="#CSS进阶：SASS文件的打包和分离" class="headerlink" title="CSS进阶：SASS文件的打包和分离"></a>CSS进阶：SASS文件的打包和分离</h4><p>安装SASS打包的loader</p><p>这里需要 在项目目录下用npm安装两个包。node-sass和sass-loader</p><p>node-sass：因为sass-loader依赖于node-sass，所以需要先安装node-sass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev node-sass</div></pre></td></tr></table></figure><p>sass-loader:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev sass-loader</div></pre></td></tr></table></figure></p><p>==注意：在用npm安装时，这个loader很容易安装失败，最好使用cnpm来进行安装。如果你安装一直报错，最好是把node_modules文件夹删除后，再重新安装。==</p><h6 id="编写loader配置"><a href="#编写loader配置" class="headerlink" title="编写loader配置"></a>编写loader配置</h6><p> 需要注意的是loader的加载要有先后顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">                test: /\.scss$/,</div><div class="line">                use: [&#123;</div><div class="line">                    loader: &quot;style-loader&quot; // creates style nodes from JS strings</div><div class="line">                &#125;, &#123;</div><div class="line">                    loader: &quot;css-loader&quot; // translates CSS into CommonJS</div><div class="line">                &#125;, &#123;</div><div class="line">                    loader: &quot;sass-loader&quot; // compiles Sass to CSS</div><div class="line">                &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>写好loader配置后，就可以愉快的编写sass文件拉，但是不要忘记把sass文件引入到entery.js中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$nav-color: #FFF;</div><div class="line">#nav &#123;</div><div class="line">  $width: 100%;</div><div class="line">  width: $width;</div><div class="line">  height:30px;</div><div class="line">  background-color: $nav-color;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>都完成后，你就可以启动我们npm run server 来查看效果了</p><h6 id="把SASS文件分离。"><a href="#把SASS文件分离。" class="headerlink" title="把SASS文件分离。"></a>把SASS文件分离。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">            test: /\.scss$/,</div><div class="line">            use: extractTextPlugin.extract(&#123;</div><div class="line">                use: [&#123;</div><div class="line">                    loader: &quot;css-loader&quot;</div><div class="line">                &#125;, &#123;</div><div class="line">                    loader: &quot;sass-loader&quot;</div><div class="line">                &#125;],</div><div class="line">                // use style-loader in development</div><div class="line">                fallback: &quot;style-loader&quot;</div><div class="line">            &#125;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h4 id="CSS进阶：自动处理CSS3属性前缀"><a href="#CSS进阶：自动处理CSS3属性前缀" class="headerlink" title="CSS进阶：自动处理CSS3属性前缀"></a>CSS进阶：自动处理CSS3属性前缀</h4><h6 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h6><p>==这里给出postcss-loader的github地址：<a href="https://github.com/postcss/postcss-loader==" target="_blank" rel="external">https://github.com/postcss/postcss-loader==</a></p><p>PostCSS是一个CSS的处理平台，它可以帮助你的CSS实现更多的功能，但是今天我们就通过其中的一个加前缀的功能，初步了解一下PostCSS。</p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>需要安装两个包postcss-loader 和autoprefixer（自动添加前缀的插件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev postcss-loader autoprefixer</div></pre></td></tr></table></figure><h6 id="postcss-config-js"><a href="#postcss-config-js" class="headerlink" title="postcss.config.js"></a>postcss.config.js</h6><p>postCSS推荐在项目根目录（和webpack.config.js同级），建立一个postcss.config.js文件。</p><h6 id="postcss-config-js-1"><a href="#postcss-config-js-1" class="headerlink" title="postcss.config.js"></a>postcss.config.js</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    plugins: [</div><div class="line">        require(&apos;autoprefixer&apos;)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这就是对postCSS一个简单的配置，引入了autoprefixer插件。让postCSS拥有添加前缀的能力，它会根据 can i use 来增加相应的css3属性前缀。</p><h6 id="编写loader"><a href="#编写loader" class="headerlink" title="编写loader"></a>编写loader</h6><p>对postcss.config.js配置完成后，我们还需要编写我们的loader配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      test: /\.css$/,</div><div class="line">      use: [</div><div class="line">            &#123;</div><div class="line">              loader: &quot;style-loader&quot;</div><div class="line">            &#125;, &#123;</div><div class="line">              loader: &quot;css-loader&quot;,</div><div class="line">              options: &#123;</div><div class="line">                 modules: true</div><div class="line">              &#125;</div><div class="line">            &#125;, &#123;</div><div class="line">              loader: &quot;postcss-loader&quot;</div><div class="line">            &#125;</div><div class="line">      ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h6 id="提取CSS"><a href="#提取CSS" class="headerlink" title="提取CSS"></a>提取CSS</h6><p>配置提取CSS的loader配置. webpack.config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">    test: /\.css$/,</div><div class="line">    use: extractTextPlugin.extract(&#123;</div><div class="line">        fallback: &apos;style-loader&apos;,</div><div class="line">        use: [</div><div class="line">            &#123; loader: &apos;css-loader&apos;, options: &#123; importLoaders: 1 &#125; &#125;,</div><div class="line">            &apos;postcss-loader&apos;</div><div class="line">        ]</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="CSS进阶：消除未使用的CSS"><a href="#CSS进阶：消除未使用的CSS" class="headerlink" title="CSS进阶：消除未使用的CSS"></a>CSS进阶：消除未使用的CSS</h4><h6 id="PurifyCSS"><a href="#PurifyCSS" class="headerlink" title="PurifyCSS"></a>PurifyCSS</h6><p>使用PurifyCSS可以大大减少CSS冗余，比如我们经常使用的BootStrap(140KB)就可以减少到只有35KB大小。这在实际开发当中是非常有用的</p><h6 id="安装PurifyCSS-webpack"><a href="#安装PurifyCSS-webpack" class="headerlink" title="安装PurifyCSS-webpack"></a>安装PurifyCSS-webpack</h6><p>从名字你就可以看出这是一个插件，而不是loader。所以这个需要安装还需要引入。 PurifyCSS-webpack要以来于purify-css这个包，所以这两个都需要安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D purifycss-webpack purify-css</div></pre></td></tr></table></figure><p>这里的-D代表的是–save-dev ,只是一个简写。</p><p>引入glob<br>因为我们需要同步检查html模板，所以我们需要引入node的glob对象使用。在webpack.config.js文件头部引入glob。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const glob = require(&apos;glob&apos;);</div></pre></td></tr></table></figure><p>引入purifycss-webpack</p><p>同样在webpack.config.js文件头部引入purifycss-webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const PurifyCSSPlugin = require(&quot;purifycss-webpack&quot;);</div></pre></td></tr></table></figure><p>配置plugins</p><p>引入完成后我们需要在webpack.config.js里配置plugins。代码如下，重点看标黄部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">plugins:[</div><div class="line">    //new uglify() </div><div class="line">    new htmlPlugin(&#123;</div><div class="line">        minify:&#123;</div><div class="line">            removeAttrubuteQuotes:true</div><div class="line">        &#125;,</div><div class="line">        hash:true,</div><div class="line">        template:&apos;./src/index.html&apos;</div><div class="line">        </div><div class="line">    &#125;),</div><div class="line">    new extractTextPlugin(&quot;css/index.css&quot;),</div><div class="line">    new PurifyCSSPlugin(&#123;</div><div class="line">        // Give paths to parse for rules. These should be absolute!</div><div class="line">        paths: glob.sync(path.join(__dirname, &apos;src/*.html&apos;)),</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">]</div></pre></td></tr></table></figure><p>这里配置了一个paths，主要是需找html模板，purifycss根据这个配置会遍历你的文件，查找哪些css被使用了。</p><p>==注意==：使用这个插件必须配合extract-text-webpack-plugin这个插件</p><hr><h2 id="给webpack增加babel支持"><a href="#给webpack增加babel支持" class="headerlink" title="给webpack增加babel支持"></a>给webpack增加babel支持</h2><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过便宜帮你达到以下目的：</p><ul><li>使用下一代的javaScript代码(ES6,ES7….)，即使这些标准目前并未被当前的浏览器完全支持。</li><li>使用基于JavaScript进行了扩展的语言，比如React的JSX。<h6 id="Babel的安装与配置"><a href="#Babel的安装与配置" class="headerlink" title="Babel的安装与配置"></a>Babel的安装与配置</h6>Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析ES6的babel-preset-es2015包和解析JSX的babel-preset-react包）。<br>我们先一次性安装这些依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure><p>在webpack中配置Babel的方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test:/\.(jsx|js)$/,</div><div class="line">    use:&#123;</div><div class="line">        loader:&apos;babel-loader&apos;,</div><div class="line">        options:&#123;</div><div class="line">            presets:[</div><div class="line">                &quot;es2015&quot;,&quot;react&quot;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    exclude:/node_modules/</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在你已经可以用webapck转换ES6的语法兼容各个浏览器了，我们可以修改一下entry.js的代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import css from &apos;./css/index.css&apos;;</div><div class="line">&#123;</div><div class="line">    let jspangString = &apos;Hello Webpack&apos;</div><div class="line">    document.getElementById(&apos;title&apos;).innerHTML=jspangString; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码使用了ES6的let声明方法。如果你不使用Babel来进行转换，你会发现打包出来的js代码没有作兼容处理，使用了Babel转换的代码是进行处理过的</p><h6 id="babelrc配置"><a href="#babelrc配置" class="headerlink" title=".babelrc配置"></a>.babelrc配置</h6><p>虽然Babel可以直接在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，如果卸载webapck.config.js中会非常的雍长不可阅读，所以我们经常把配置卸载.babelrc文件里。</p><p>在项目根目录新建.babelrc文件，并把配置写到文件里。</p><h6 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;:[&quot;react&quot;,&quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="webpack-config-js里的loader配置"><a href="#webpack-config-js里的loader配置" class="headerlink" title=".webpack.config.js里的loader配置"></a>.webpack.config.js里的loader配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test:/\.(jsx|js)$/,</div><div class="line">    use:&#123;</div><div class="line">        loader:&apos;babel-loader&apos;,</div><div class="line">    &#125;,</div><div class="line">    exclude:/node_modules/</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="ENV："><a href="#ENV：" class="headerlink" title="ENV："></a>ENV：</h6><p>现在网络上已经不流行babel-preset-es2015，现在官方推荐使用的是babel-preset-env,那我们为了紧跟潮流，我们在讲一下env的配置方法。</p><p>首先需要下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-preset-env</div></pre></td></tr></table></figure><p>然后修改.babelrc里的配置文件。其实只要把之前的es2015换成env就可以了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;:[&quot;react&quot;,&quot;env&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>总结：对于在React中Babel的使用，如何解析JSX，我会在后边的课程作详细了解，大家不要着急。在实际工作中还是要安装Babel的，这样能更好的兼容每种浏览器，而把Babel的配置文件分解出来是最好的选择。</p><hr><h3 id="打包后如何调试"><a href="#打包后如何调试" class="headerlink" title="打包后如何调试"></a>打包后如何调试</h3><p>在使用webpack时只要通过简单的devtool配置，webapck就会自动给我们生产source maps 文件，map文件是一种对应编译文件和源文件的方法，让我们调试起来更简单。</p><h6 id="四种选项"><a href="#四种选项" class="headerlink" title="四种选项"></a>四种选项</h6><p>在配置devtool时，webpack给我们提供了四种选项。</p><ul><li>source-map:在一个单独文件中产生一个完整且功能完全的文件。这个文件具有最好的source map,但是它会减慢打包速度；</li><li>cheap-module-source-map:在一个单独的文件中产生一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号）,会对调试造成不便。</li><li>eval-source-map:使用eval打包源文件模块，在同一个文件中生产干净的完整版的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定要不开启这个选项。</li><li>cheap-module-eval-source-map:这是在打包文件时最快的生产source map的方法，生产的 Source map 会和打包后的JavaScript文件同行显示，没有影射列，和eval-source-map选项具有相似的缺点</li></ul><p>四种打包模式，有上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对执行和调试有一定的影响。</p><p>个人意见是，如果大型项目可以使用source-map，如果是中小型项目使用eval-source-map就完全可以应对，需要强调说明的是，source map只适用于开发阶段，上线前记得修改这些调试设置。</p><p>简单的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  devtool: &apos;eval-source-map&apos;,</div><div class="line">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + &quot;/public&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>总结：调试在开发中也是必不可少的，但是一定要记得在上线前一定要修改webpack配置，在打出上线包。</p><hr><h4 id="开发和生产并行设置"><a href="#开发和生产并行设置" class="headerlink" title="开发和生产并行设置"></a>开发和生产并行设置</h4><p>我们在以前的配置中设置了一个变量website，用于静态资源正确找到路径。那如果生产环境和开发环境不一样，而且我们需要来回切换，这时候我们需要更好的设置方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var website=&#123;</div><div class="line">    publicPath:&quot;http://192.168.0.104:1717/&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="修改package-json命令"><a href="#修改package-json命令" class="headerlink" title="修改package.json命令"></a>修改package.json命令</h6><p>其实就是添加一个dev设置，并通过环境变量来进行区分，下面是package.json里的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;,</div><div class="line">    &quot;dev&quot;:&quot;set type=dev&amp;webapck&quot;,</div><div class="line">    &quot;build&quot;: &quot;set type=build&amp;webpack&quot;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h6 id="修改webpack-config-js文件"><a href="#修改webpack-config-js文件" class="headerlink" title="修改webpack.config.js文件"></a>修改webpack.config.js文件</h6><p>可以利用node的语法来读取type的值，然后根据type的值用if–else判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if(process.env.type== &quot;build&quot;)&#123;</div><div class="line">    var website=&#123;</div><div class="line">        publicPath:&quot;http://192.168.0.104:1717/&quot;</div><div class="line">    &#125;</div><div class="line">&#125;else&#123;</div><div class="line">    var website=&#123;</div><div class="line">        publicPath:&quot;http://cdn.jspang.com/&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你说我想看一下传过来的值到底是什么？可以用下面的输出语句.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log( encodeURIComponent(process.env.type) );</div></pre></td></tr></table></figure><h6 id="Mac下的package-json设置"><a href="#Mac下的package-json设置" class="headerlink" title="Mac下的package.json设置"></a>Mac下的package.json设置</h6><p>MAC电脑下需要把set换成export，并且要多加一个&amp;符，具体代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;,</div><div class="line">    &quot;dev&quot;:&quot;export type=dev&amp;&amp;webpack&quot;,</div><div class="line">    &quot;build&quot;: &quot;export type=build&amp;&amp;webpack&quot;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><hr><h2 id="实战技巧：webpack模块化配置"><a href="#实战技巧：webpack模块化配置" class="headerlink" title="实战技巧：webpack模块化配置"></a>实战技巧：webpack模块化配置</h2><p>看下面ES6中的模块化代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function jspang()&#123;</div><div class="line">    alert(&apos;jspang.com:&apos;+&apos;webpack&apos;);</div><div class="line">&#125;</div><div class="line">module.exports=jspang;</div></pre></td></tr></table></figure><p>上面的代码是一个最简单的es6模块化写法，我们声明了一个jspang方法，并且把这个方法用module.exports进行暴露出去。然后我们在入口文件中用import进行引入，并进行使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import jspang from &apos;./jspang.js&apos;;</div><div class="line">jspang();</div></pre></td></tr></table></figure><p>我们了解如何作Javascript的模块化后，其实webpack的模块化和上边的过程很类似</p><h3 id="webpack模块"><a href="#webpack模块" class="headerlink" title="webpack模块"></a>webpack模块</h3><p>为了让大家容易看懂，我把webpack.config.js中的entry入口文件进行模块化设置，单独拿出来制作成一个模块。</p><p>首先在根目录，新建一个webpack_config文件夹，然后新建entry_webpack.js文件，代码如下：</p><h6 id="entry-webpack-js"><a href="#entry-webpack-js" class="headerlink" title="entry_webpack.js"></a>entry_webpack.js</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//声明entry变量</div><div class="line">const entry =&#123;&#125;;  </div><div class="line">//声明路径属性</div><div class="line">entry.path=&#123;</div><div class="line">    entry:&apos;./src/entry.js&apos;  </div><div class="line">&#125;</div><div class="line">//进行模块化</div><div class="line">module.exports =entry;</div></pre></td></tr></table></figure><p>配置的模块化代码编写好以后，需要在webpack.config.js中引入，注意这里的引入只能使用require的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const entry = require(&quot;./webpack_config/entry_webpack.js&quot;)</div></pre></td></tr></table></figure><p>然后在入口文件部分，修改成如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">entry:entry.path,</div></pre></td></tr></table></figure><p>这时候你可以再次使用npm  run dev 进行测试，你会发现模块化成功了</p><h6 id="优雅打包第三方类库"><a href="#优雅打包第三方类库" class="headerlink" title="优雅打包第三方类库"></a>优雅打包第三方类库</h6><h6 id="引入JQuery"><a href="#引入JQuery" class="headerlink" title="引入JQuery"></a>引入JQuery</h6><p>其实引用第三方库的方法有很多种，但是有些并不是很优雅，还有些方法会出现打包问题，技术胖在这里介绍一下自己工作中引入第三方模块的方法，我们就拿JQuery为例。小伙伴们要举一反三，学会后试着自己引入Vue试试。</p><h6 id="安装JQuery"><a href="#安装JQuery" class="headerlink" title="安装JQuery"></a>安装JQuery</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save jquery</div></pre></td></tr></table></figure><p>安装时需要注意的时Jquery最终要在生产环境中使用，所以我们这里要使用–save进行安装。</p><h6 id="修改entry-js文件"><a href="#修改entry-js文件" class="headerlink" title="修改entry.js文件"></a>修改entry.js文件</h6><p>安装好后，还需要引入到我们的entry.js中，这里直接使用import进行引入就可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import $ from &apos;jquery&apos;;</div></pre></td></tr></table></figure><p>可以看到上面是标准的jquery代码，你可以使用npm  run server 进行测试，现在代码顺利运行了，这说明我们引用的JQuery库成功了。需要说的是你不仅可以在入口中进行引入，你还可以在任何你需要的js中引入，webpack并不会重复打包，它只给我们打包一次。</p><h6 id="用plugin引入"><a href="#用plugin引入" class="headerlink" title="用plugin引入"></a>用plugin引入</h6><p>如果你觉的上面的方法和webpack没什么关系，只是普通的引入，webpack只是负责了一下打包，这样并没有全局感。那再学习一种在webapck.config.js中配置的方法，这种不需要你在入口文件中引入，而是webpack给你作了全局引入。这个插件就是ProvidePlugin。</p><p>ProvidePlugin是一个webpack自带的插件，Provide的意思就是装备、提供。因为ProvidePlugin是webpack自带的插件，所以要先再webpack.config.js中引入webpack。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const webpack = require(&apos;webpack&apos;);</div></pre></td></tr></table></figure><p>在webpack.config.js里引入必须使用require，否则会报错的，这点小伙伴们一定要注意。</p><p>引入成功后配置我们的plugins模块，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">plugins:[</div><div class="line">    new webpack.ProvidePlugin(&#123;</div><div class="line">        $:&quot;jquery&quot;</div><div class="line">    &#125;)</div><div class="line">],</div></pre></td></tr></table></figure><p>配置好后，就可以在你的入口文件中使用了，而不用再次引入了。这是一种全局的引入，在实际工作中也可以很好的规范项目所使用的第三方库</p><hr><h2 id="实战技巧：watch的正确使用方法"><a href="#实战技巧：watch的正确使用方法" class="headerlink" title="实战技巧：watch的正确使用方法"></a>实战技巧：watch的正确使用方法</h2><p>在初级开发阶段，使用webpack-dev-server就可以充当服务器和完成打包任务，但时随着你项目的进一步完成，可能需要前后台联调或者两个前端合并代码时，就需要一个公共的服务器了。这时候我们每次保存后手动打包显然效率太低，我们希望的场景是代码发生变化后，只要保存，webpack自动为我们进行打包。这个工具就是watch，这节课我们把wacht完全学会，你会发现在开发中更加的得心应手</p><h6 id="watch的配置"><a href="#watch的配置" class="headerlink" title="watch的配置"></a>watch的配置</h6><p>很多小伙伴认为–warch直接使用就可以，并没有什么需要讲的。其实这只是初级的用法，但是在学习一种技术时，我们必须要做到了解全部，也就是常说的知其然知其所以然。我们看下面的配置代码，我在代码中已经做出了解释。</p><hr><p>watchOptions:{<br>    //检测修改的时间，以毫秒为单位<br>    poll:1000,<br>    //防止重复保存而发生重复编译错误。这里设置的500是半秒内重复保存，不进行打包操作<br>    aggregateTimeout:500,<br>    //不监听的目录<br>    ignored:/node_modules/,<br>}</p><p>上边的每一行配置我都作了说明，有时候你在没配置的情况下，直接用webpack –watch是不起作用的，这时候你需要进行配置这些选项。</p><p>配置好后，我们就可以痛快的使用watch了，在大型项目中，这大大加快了我们的开发效率，不用反复的手动打包了。</p><h6 id="BannerPlugin插件"><a href="#BannerPlugin插件" class="headerlink" title="BannerPlugin插件"></a>BannerPlugin插件</h6><p>由于这节课的内容太少了，我们再讲一个工作中的小技巧，再工作中每个人写的代码都要写上备注，为的就是在发生问题时可以找到当时写代码的人。有时候也用于版权声明。</p><p>这个插件就是BannerPlugin，我们使用后会在JS中加上我们的版权或开发者声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack.BannerPlugin(&apos;JSPang版权所有，看官方免费视频到jspang.com收看&apos;)</div></pre></td></tr></table></figure><p>需要注意的是在使用这个插件之前必须引入webpack。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const webpack = require(&apos;webpack&apos;);</div></pre></td></tr></table></figure><p>这时在dist目录下的entery.js已经加上了版权声明。<br><img src="http://7xjyw1.com1.z0.glb.clouddn.com/webpack_bannerplugin.png" alt="image"></p><hr><h2 id="webpack优化黑技能"><a href="#webpack优化黑技能" class="headerlink" title="webpack优化黑技能"></a>webpack优化黑技能</h2><p>作为一个程序员，无论是写什么程序都i要有一颗不断优化的心。webpack在优化这条路上，也为我们作了很多配置，这节课我们就看看工作中常用的webpack优化黑技能。</p><h6 id="ProvidePlugin和import"><a href="#ProvidePlugin和import" class="headerlink" title="ProvidePlugin和import"></a>ProvidePlugin和import</h6><p>在第19节中学习了如何引入第三方类库，并引入了jquery，在引用JQuery时我们用了两种方法，第一种时import，第二种时使用ProvidePlugin插件。那两种引入方法有什么区别那?</p><ul><li>import引入方法：引用后不管你在代码中使用不适用该类库，都会把该类库打包起来，这样有时就会让代码产生冗余。</li></ul><ul><li>ProvidePlugin引入方法：引用后只有在类库使用时，才按需进行打包，所以建议在工作使用插件的方式进行引入。</li><li><h6 id="抽离JQuery"><a href="#抽离JQuery" class="headerlink" title="抽离JQuery"></a>抽离JQuery</h6>上边的方法只是优化的第一步，工作中你会发现，不适用的类库几乎我们也不会引入，所以上边只是一个必要操作的第一步。那往往把第三方类库抽离出来，才是最好的解决方法。</li></ul><h6 id="第一步：修改入口文件"><a href="#第一步：修改入口文件" class="headerlink" title="第一步：修改入口文件"></a>第一步：修改入口文件</h6><p>抽离的第一步是修改入口文件，把我们的JQuery也加入到入口文件中，看下面的代码。</p><p>webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">entry:&#123;</div><div class="line">       entry:&apos;./src/entry.js&apos;,</div><div class="line">       jquery:&apos;jquery&apos;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><h6 id="第二步：引入插件"><a href="#第二步：引入插件" class="headerlink" title="第二步：引入插件"></a>第二步：引入插件</h6><p>我们需要引入optimize优化插件，插件里边是需要配置的，具体配置项看下面的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    //name对应入口文件中的名字，我们起的是jQuery</div><div class="line">    name:&apos;jquery&apos;,</div><div class="line">    //把文件打包到哪里，是一个路径</div><div class="line">    filename:&quot;assets/js/jquery.min.js&quot;,</div><div class="line">    //最小打包的文件模块数，这里直接写2就好</div><div class="line">    minChunks:2</div><div class="line">&#125;),</div></pre></td></tr></table></figure></p><p>minChunks一般都是固定配置，但是不写是不行的，你会打包失败。<br>filename是可以省略的，这是直接打包到了打包根目录下，我们这里直接打包到了dist文件夹下边。</p><p>配置完成后，我们可以先删掉以前打包的dist目录，然后用webpack再次打包，你会发现jquery被抽离了出来，并且我们的entry.js文件变的很小。</p><h6 id="多个第三方类库抽离"><a href="#多个第三方类库抽离" class="headerlink" title="多个第三方类库抽离"></a>多个第三方类库抽离</h6><p>会了如何抽离Jquery，但是在实际开发中，我们会引用不止一个第三方类库，这时也需要抽离。我们拿引入Vue为例，看看如何抽离出来。</p><h6 id="第一步-我们先用npm-进行安装。"><a href="#第一步-我们先用npm-进行安装。" class="headerlink" title="第一步:我们先用npm 进行安装。"></a>第一步:我们先用npm 进行安装。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm instawll vue --save</div></pre></td></tr></table></figure><p>注意这里是–save，而不是–save-dev。因为这个类库在生产环境中也是要使用的。</p><h6 id="第二步：在入口配置中引入vue和jquery"><a href="#第二步：在入口配置中引入vue和jquery" class="headerlink" title="第二步：在入口配置中引入vue和jquery"></a>第二步：在入口配置中引入vue和jquery</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">entry:&#123;</div><div class="line">    entry:&apos;./src/entry.js&apos;,</div><div class="line">    jquery:&apos;jquery&apos;,</div><div class="line">    vue:&apos;vue&apos;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>只是多比上边多加了一个vue选项。</p><h6 id="第三步：修改CommonsChunkPlugin配置"><a href="#第三步：修改CommonsChunkPlugin配置" class="headerlink" title="第三步：修改CommonsChunkPlugin配置"></a>第三步：修改CommonsChunkPlugin配置</h6><p>需要修改两个位置：</p><ul><li>第一个是在name属性里把原来的字符串改为数组，因为我们要引入多个模块，所以是数组；</li><li>第二个是在filename属性中把我们输出的文件名改为匹配付[name],这项操作就是打包出来的名字跟随我们打包前的模块。</li></ul><p>下面是我们修改的代码，你可以跟jquery抽离时对比一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    //name对应入口文件中的名字，我们起的是jQuery</div><div class="line">    name:[&apos;jquery&apos;,&apos;vue&apos;],</div><div class="line">    //把文件打包到哪里，是一个路径</div><div class="line">    filename:&quot;assets/js/[name].js&quot;,</div><div class="line">    //最小打包的文件模块数，这里直接写2就好</div><div class="line">    minChunks:2</div><div class="line">&#125;),</div></pre></td></tr></table></figure></p><ul><li>也可以配置后缀名[ext]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    //name对应入口文件中的名字，我们起的是jQuery</div><div class="line">    name:[&apos;jquery&apos;,&apos;vue&apos;],</div><div class="line">    //把文件打包到哪里，是一个路径</div><div class="line">    filename:&quot;assets/js/[name].[ext]&quot;,</div><div class="line">    //最小打包的文件模块数，这里直接写2就好</div><div class="line">    minChunks:2</div><div class="line">&#125;),</div></pre></td></tr></table></figure><p>配置好后，我们就可以在控制台输入webpack进行打包了。你会看到我们预想的结果，jquery和vue都被我们抽离出来了</p><h3 id="实战技巧：静态资源集中输出"><a href="#实战技巧：静态资源集中输出" class="headerlink" title="实战技巧：静态资源集中输出"></a>实战技巧：静态资源集中输出</h3><p>工作中会有一些已经存在但在项目中没有引用的图片资源或者其他静态资源（比如设计图、开发文档），这些静态资源有可能是文档，也有可能是一些额外的图片。项目组长会要求你打包时保留这些静态资源，直接打包到制定文件夹。其实打包这些资源只需要用到copy-webpack-plugin。</p><h5 id="使用copy-webpack-plugin"><a href="#使用copy-webpack-plugin" class="headerlink" title="使用copy-webpack-plugin"></a>使用copy-webpack-plugin</h5><p>copy-webpack-plugin就是专门为我们作静态资源转移的插件，不过它不同上两节使用的插件，它是需要安装的。</p><h6 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h6><p>插件的安装只要使用npm就可以了<br>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install --save-dev copy-webpack-plugin</div></pre></td></tr></table></figure><p>如果在安装过程中出错，你可以使用npm来进行安装。</p><h6 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h6><p>安装好后，需要在webpack.config.js文件的头部引入这个插件才可以使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const copyWebpackPlugin= require(&quot;copy-webpack-plugin&quot;);</div></pre></td></tr></table></figure><h6 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h6><p>引入之后我们就可以在plugins里边进行配置插件了，我们先看下面的插件配置代码，然后再进行详细讲解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">new copyWebpackPlugin([&#123;</div><div class="line">        from:path.resolve(__dirname, &apos;./src/public&apos;),</div><div class="line">        to:&apos;./public&apos;</div><div class="line">    &#125;])</div></pre></td></tr></table></figure><ul><li>from:要打包的静态资源目录地址，这里的__dirname是指项目目录下，是node的一种语法，可以直接定位到本机的项目目录中。</li><li>to:要打包到的文件夹路径，跟随output配置中的目录。所以不需要再自己加__dirname。</li><li></li></ul><hr><h3 id="实战技巧：Json配置文件使用"><a href="#实战技巧：Json配置文件使用" class="headerlink" title="实战技巧：Json配置文件使用"></a>实战技巧：Json配置文件使用</h3><p>在实际工作中，我们的项目都会配置一个Json的文件或者说API文件，作为项目的配置文件。有时候你也会从后台读取到一个json的文件，这节课就学习如何在webpack环境中使用Json。如果你会webpack1或者webpack2版本中，你是需要加载一个json-loader的loader进来的，但是在webpack3.x版本中，你不再需要另外引入了。</p><h6 id="读出Json内容"><a href="#读出Json内容" class="headerlink" title="读出Json内容"></a>读出Json内容</h6><p>第一步：现在我们的index.html模板中加入一个层，并给层一个Id，为了是在javascript代码中可以方便引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;json&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><p>第二步：到src文件夹下，找到入口文件，我这里是entry.js文件。修改里边的代码，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var json =require(&apos;../config.json&apos;);</div><div class="line">document.getElementById(&quot;json&quot;).innerHTML= json.name;</div></pre></td></tr></table></figure><p>这两行代码非常简单，第一行是引入我们的json文件，第二行驶写入到到DOM中。</p><p>第三部：启用我们的npm run server 命令就可以在浏览器中看到结果了。</p><h5 id="说说热更新"><a href="#说说热更新" class="headerlink" title="说说热更新"></a>说说热更新</h5><p>其实在webpack3中启用热加载相当的容易，只要加入HotModuleReplacementPlugin这个插件就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack.HotModuleReplacementPlugin()</div></pre></td></tr></table></figure><p>现在只要你启动 npm run server 后，修改index.html中的内容，浏览器可以自动给我们更新出最新的页面。</p><p>但这里说的热加更新和我们平时写程序的热加载不是一回事，比如说我们Vue或者React中的热更新，并不是刷新整个页面，而是一个局部更新，而这里的更新是重新刷新了页面。</p><p>这点小伙伴们要搞清楚。</p><p>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack-css-loader加载器&quot;&gt;&lt;a href=&quot;#webpack-css-loader加载器&quot; class=&quot;headerlink&quot; title=&quot;webpack css loader加载器&quot;&gt;&lt;/a&gt;webpack css loader加载器&lt;/
      
    
    </summary>
    
    
      <category term="打包" scheme="http://www.cuijiajun.xin/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
</feed>
